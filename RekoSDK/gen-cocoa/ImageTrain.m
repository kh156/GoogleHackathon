/**
 * Autogenerated by Thrift Compiler (0.8.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */

#import <Foundation/Foundation.h>
#import "TProtocol.h"
#import "TApplicationException.h"
#import "TProtocolUtil.h"
#import "TProcessor.h"


#import "ImageTrain.h"

@implementation AddPhotoRequest

- (id) initWithApi_id: (NSString *) api_id name_space: (NSString *) name_space user_id: (NSString *) user_id tags: (NSArray *) tags rawimages: (char **) rawimages rawimage_lengths: (int32_t *) rawimage_lengths rawimage_num: (int32_t) rawimage_num imagefeatures: (NSArray *) imagefeatures margin: (double) margin face_detecion: (double) face_detecion urls: (NSArray *) urls file_name: (NSArray *) file_name feature_type: (NSString *) feature_type training_mode: (NSString *) training_mode ext: (NSString *) ext
{
  self = [super init];
  __api_id = [api_id retain];
  __api_id_isset = YES;
  __name_space = [name_space retain];
  __name_space_isset = YES;
  __user_id = [user_id retain];
  __user_id_isset = YES;
  __tags = [tags retain];
  __tags_isset = YES;
  __rawimages = rawimages;
  __rawimages_isset = YES;
  __rawimage_lengths = rawimage_lengths;
  __rawimage_lengths_isset = YES;
  __imagefeatures = [imagefeatures retain];
  __imagefeatures_isset = YES;
  __margin = margin;
  __margin_isset = YES;
  __face_detecion = face_detecion;
  __face_detecion_isset = YES;
  __urls = [urls retain];
  __urls_isset = YES;
  __file_name = [file_name retain];
  __file_name_isset = YES;
  __feature_type = [feature_type retain];
  __feature_type_isset = YES;
  __training_mode = [training_mode retain];
  __training_mode_isset = YES;
  __ext = [ext retain];
  __ext_isset = YES;
  return self;
}

- (id) initWithCoder: (NSCoder *) decoder
{
  self = [super init];
  if ([decoder containsValueForKey: @"api_id"])
  {
    __api_id = [[decoder decodeObjectForKey: @"api_id"] retain];
    __api_id_isset = YES;
  }
  if ([decoder containsValueForKey: @"name_space"])
  {
    __name_space = [[decoder decodeObjectForKey: @"name_space"] retain];
    __name_space_isset = YES;
  }
  if ([decoder containsValueForKey: @"user_id"])
  {
    __user_id = [[decoder decodeObjectForKey: @"user_id"] retain];
    __user_id_isset = YES;
  }
  if ([decoder containsValueForKey: @"tags"])
  {
    __tags = [[decoder decodeObjectForKey: @"tags"] retain];
    __tags_isset = YES;
  }
  if ([decoder containsValueForKey: @"imagefeatures"])
  {
    __imagefeatures = [[decoder decodeObjectForKey: @"imagefeatures"] retain];
    __imagefeatures_isset = YES;
  }
  if ([decoder containsValueForKey: @"margin"])
  {
    __margin = [decoder decodeDoubleForKey: @"margin"];
    __margin_isset = YES;
  }
  if ([decoder containsValueForKey: @"face_detecion"])
  {
    __face_detecion = [decoder decodeDoubleForKey: @"face_detecion"];
    __face_detecion_isset = YES;
  }
  if ([decoder containsValueForKey: @"urls"])
  {
    __urls = [[decoder decodeObjectForKey: @"urls"] retain];
    __urls_isset = YES;
  }
  if ([decoder containsValueForKey: @"file_name"])
  {
    __file_name = [[decoder decodeObjectForKey: @"file_name"] retain];
    __file_name_isset = YES;
  }
  if ([decoder containsValueForKey: @"feature_type"])
  {
    __feature_type = [[decoder decodeObjectForKey: @"feature_type"] retain];
    __feature_type_isset = YES;
  }
  if ([decoder containsValueForKey: @"training_mode"])
  {
    __training_mode = [[decoder decodeObjectForKey: @"training_mode"] retain];
    __training_mode_isset = YES;
  }
  if ([decoder containsValueForKey: @"ext"])
  {
    __ext = [[decoder decodeObjectForKey: @"ext"] retain];
    __ext_isset = YES;
  }
  return self;
}

- (void) encodeWithCoder: (NSCoder *) encoder
{
  if (__api_id_isset)
  {
    [encoder encodeObject: __api_id forKey: @"api_id"];
  }
  if (__name_space_isset)
  {
    [encoder encodeObject: __name_space forKey: @"name_space"];
  }
  if (__user_id_isset)
  {
    [encoder encodeObject: __user_id forKey: @"user_id"];
  }
  if (__tags_isset)
  {
    [encoder encodeObject: __tags forKey: @"tags"];
  }
  if (__imagefeatures_isset)
  {
    [encoder encodeObject: __imagefeatures forKey: @"imagefeatures"];
  }
  if (__margin_isset)
  {
    [encoder encodeDouble: __margin forKey: @"margin"];
  }
  if (__face_detecion_isset)
  {
    [encoder encodeDouble: __face_detecion forKey: @"face_detecion"];
  }
  if (__urls_isset)
  {
    [encoder encodeObject: __urls forKey: @"urls"];
  }
  if (__file_name_isset)
  {
    [encoder encodeObject: __file_name forKey: @"file_name"];
  }
  if (__feature_type_isset)
  {
    [encoder encodeObject: __feature_type forKey: @"feature_type"];
  }
  if (__training_mode_isset)
  {
    [encoder encodeObject: __training_mode forKey: @"training_mode"];
  }
  if (__ext_isset)
  {
    [encoder encodeObject: __ext forKey: @"ext"];
  }
}

- (void) dealloc
{
  [__api_id release];
  [__name_space release];
  [__user_id release];
  [__tags release];
  [__imagefeatures release];
  [__urls release];
  [__file_name release];
  [__feature_type release];
  [__training_mode release];
  [__ext release];
  [super dealloc];
}

- (NSString *) api_id {
  return [[__api_id retain] autorelease];
}

- (void) setApi_id: (NSString *) api_id {
  [api_id retain];
  [__api_id release];
  __api_id = api_id;
  __api_id_isset = YES;
}

- (BOOL) api_idIsSet {
  return __api_id_isset;
}

- (void) unsetApi_id {
  [__api_id release];
  __api_id = nil;
  __api_id_isset = NO;
}

- (NSString *) name_space {
  return [[__name_space retain] autorelease];
}

- (void) setName_space: (NSString *) name_space {
  [name_space retain];
  [__name_space release];
  __name_space = name_space;
  __name_space_isset = YES;
}

- (BOOL) name_spaceIsSet {
  return __name_space_isset;
}

- (void) unsetName_space {
  [__name_space release];
  __name_space = nil;
  __name_space_isset = NO;
}

- (NSString *) user_id {
  return [[__user_id retain] autorelease];
}

- (void) setUser_id: (NSString *) user_id {
  [user_id retain];
  [__user_id release];
  __user_id = user_id;
  __user_id_isset = YES;
}

- (BOOL) user_idIsSet {
  return __user_id_isset;
}

- (void) unsetUser_id {
  [__user_id release];
  __user_id = nil;
  __user_id_isset = NO;
}

- (NSArray *) tags {
  return [[__tags retain] autorelease];
}

- (void) setTags: (NSArray *) tags {
  [tags retain];
  [__tags release];
  __tags = tags;
  __tags_isset = YES;
}

- (BOOL) tagsIsSet {
  return __tags_isset;
}

- (void) unsetTags {
  [__tags release];
  __tags = nil;
  __tags_isset = NO;
}

- (char **) rawimages {
  return __rawimages;
}

- (void) setRawimages: (char **) rawimages {
  __rawimages = rawimages;
  __rawimages_isset = YES;
}

- (BOOL) rawimagesIsSet {
  return __rawimages_isset;
}

- (void) unsetRawimages {
  __rawimages = nil;
  __rawimages_isset = NO;
}

- (int32_t *) rawimage_lengths {
    return __rawimage_lengths;
}

- (void) setRawimage_lengths: (int32_t *) rawimage_lengths {
    __rawimage_lengths = rawimage_lengths;
    __rawimage_lengths_isset = YES;
}

- (BOOL) rawimage_lengthsIsSet {
    return __rawimage_lengths_isset;
}

- (void) unsetRawimage_lengths {
    __rawimage_lengths = nil;
    __rawimage_lengths_isset = NO;
}

- (int32_t) rawimage_num {
    return __rawimage_num;
}

- (void) setRawimage_num: (int32_t) rawimage_num {
    __rawimage_num = rawimage_num;
    __rawimage_num_isset = YES;
}

- (BOOL) rawimage_numIsSet {
    return __rawimage_num_isset;
}

- (void) unsetRawimage_num {
    __rawimage_num = 0;
    __rawimage_num_isset = NO;
}

- (NSArray *) imagefeatures {
  return [[__imagefeatures retain] autorelease];
}

- (void) setImagefeatures: (NSArray *) imagefeatures {
  [imagefeatures retain];
  [__imagefeatures release];
  __imagefeatures = imagefeatures;
  __imagefeatures_isset = YES;
}

- (BOOL) imagefeaturesIsSet {
  return __imagefeatures_isset;
}

- (void) unsetImagefeatures {
  [__imagefeatures release];
  __imagefeatures = nil;
  __imagefeatures_isset = NO;
}

- (double) margin {
  return __margin;
}

- (void) setMargin: (double) margin {
  __margin = margin;
  __margin_isset = YES;
}

- (BOOL) marginIsSet {
  return __margin_isset;
}

- (void) unsetMargin {
  __margin_isset = NO;
}

- (double) face_detecion {
  return __face_detecion;
}

- (void) setFace_detecion: (double) face_detecion {
  __face_detecion = face_detecion;
  __face_detecion_isset = YES;
}

- (BOOL) face_detecionIsSet {
  return __face_detecion_isset;
}

- (void) unsetFace_detecion {
  __face_detecion_isset = NO;
}

- (NSArray *) urls {
  return [[__urls retain] autorelease];
}

- (void) setUrls: (NSArray *) urls {
  [urls retain];
  [__urls release];
  __urls = urls;
  __urls_isset = YES;
}

- (BOOL) urlsIsSet {
  return __urls_isset;
}

- (void) unsetUrls {
  [__urls release];
  __urls = nil;
  __urls_isset = NO;
}

- (NSArray *) file_name {
  return [[__file_name retain] autorelease];
}

- (void) setFile_name: (NSArray *) file_name {
  [file_name retain];
  [__file_name release];
  __file_name = file_name;
  __file_name_isset = YES;
}

- (BOOL) file_nameIsSet {
  return __file_name_isset;
}

- (void) unsetFile_name {
  [__file_name release];
  __file_name = nil;
  __file_name_isset = NO;
}

- (NSString *) feature_type {
  return [[__feature_type retain] autorelease];
}

- (void) setFeature_type: (NSString *) feature_type {
  [feature_type retain];
  [__feature_type release];
  __feature_type = feature_type;
  __feature_type_isset = YES;
}

- (BOOL) feature_typeIsSet {
  return __feature_type_isset;
}

- (void) unsetFeature_type {
  [__feature_type release];
  __feature_type = nil;
  __feature_type_isset = NO;
}

- (NSString *) training_mode {
  return [[__training_mode retain] autorelease];
}

- (void) setTraining_mode: (NSString *) training_mode {
  [training_mode retain];
  [__training_mode release];
  __training_mode = training_mode;
  __training_mode_isset = YES;
}

- (BOOL) training_modeIsSet {
  return __training_mode_isset;
}

- (void) unsetTraining_mode {
  [__training_mode release];
  __training_mode = nil;
  __training_mode_isset = NO;
}

- (NSString *) ext {
  return [[__ext retain] autorelease];
}

- (void) setExt: (NSString *) ext {
  [ext retain];
  [__ext release];
  __ext = ext;
  __ext_isset = YES;
}

- (BOOL) extIsSet {
  return __ext_isset;
}

- (void) unsetExt {
  [__ext release];
  __ext = nil;
  __ext_isset = NO;
}

- (void) read: (id <TProtocol>) inProtocol
{
  NSString * fieldName;
  int fieldType;
  int fieldID;

  [inProtocol readStructBeginReturningName: NULL];
  while (true)
  {
    [inProtocol readFieldBeginReturningName: &fieldName type: &fieldType fieldID: &fieldID];
    if (fieldType == TType_STOP) { 
      break;
    }
    switch (fieldID)
    {
      case 1:
        if (fieldType == TType_STRING) {
          NSString * fieldValue = [inProtocol readString];
          [self setApi_id: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 2:
        if (fieldType == TType_STRING) {
          NSString * fieldValue = [inProtocol readString];
          [self setName_space: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 3:
        if (fieldType == TType_STRING) {
          NSString * fieldValue = [inProtocol readString];
          [self setUser_id: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 4:
        if (fieldType == TType_LIST) {
          int _size0;
          [inProtocol readListBeginReturningElementType: NULL size: &_size0];
          NSMutableArray * fieldValue = [[NSMutableArray alloc] initWithCapacity: _size0];
          int _i1;
          for (_i1 = 0; _i1 < _size0; ++_i1)
          {
            NSString * _elem2 = [inProtocol readString];
            [fieldValue addObject: _elem2];
          }
          [inProtocol readListEnd];
          [self setTags: fieldValue];
          [fieldValue release];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 5:
        if (fieldType == TType_LIST) {
          int _size3;
          [inProtocol readListBeginReturningElementType: NULL size: &_size3];
          NSMutableArray * fieldValue = [[NSMutableArray alloc] initWithCapacity: _size3];
          int _i4;
          for (_i4 = 0; _i4 < _size3; ++_i4)
          {
            NSString * _elem5 = [inProtocol readString];
            [fieldValue addObject: _elem5];
          }
          [inProtocol readListEnd];
   //       [self setRawimages: fieldValue];
          [fieldValue release];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 6:
        if (fieldType == TType_LIST) {
          int _size6;
          [inProtocol readListBeginReturningElementType: NULL size: &_size6];
          NSMutableArray * fieldValue = [[NSMutableArray alloc] initWithCapacity: _size6];
          int _i7;
          for (_i7 = 0; _i7 < _size6; ++_i7)
          {
            int _size9;
            [inProtocol readListBeginReturningElementType: NULL size: &_size9];
            NSMutableArray * _elem8 = [[NSMutableArray alloc] initWithCapacity: _size9];
            int _i10;
            for (_i10 = 0; _i10 < _size9; ++_i10)
            {
              double _elem11 = [inProtocol readDouble];
              [_elem8 addObject: [NSNumber numberWithDouble: _elem11]];
            }
            [inProtocol readListEnd];
            [fieldValue addObject: _elem8];
            [_elem8 release];
          }
          [inProtocol readListEnd];
          [self setImagefeatures: fieldValue];
          [fieldValue release];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 7:
        if (fieldType == TType_DOUBLE) {
          double fieldValue = [inProtocol readDouble];
          [self setMargin: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 8:
        if (fieldType == TType_DOUBLE) {
          double fieldValue = [inProtocol readDouble];
          [self setFace_detecion: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 9:
        if (fieldType == TType_LIST) {
          int _size12;
          [inProtocol readListBeginReturningElementType: NULL size: &_size12];
          NSMutableArray * fieldValue = [[NSMutableArray alloc] initWithCapacity: _size12];
          int _i13;
          for (_i13 = 0; _i13 < _size12; ++_i13)
          {
            NSString * _elem14 = [inProtocol readString];
            [fieldValue addObject: _elem14];
          }
          [inProtocol readListEnd];
          [self setUrls: fieldValue];
          [fieldValue release];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 10:
        if (fieldType == TType_LIST) {
          int _size15;
          [inProtocol readListBeginReturningElementType: NULL size: &_size15];
          NSMutableArray * fieldValue = [[NSMutableArray alloc] initWithCapacity: _size15];
          int _i16;
          for (_i16 = 0; _i16 < _size15; ++_i16)
          {
            NSString * _elem17 = [inProtocol readString];
            [fieldValue addObject: _elem17];
          }
          [inProtocol readListEnd];
          [self setFile_name: fieldValue];
          [fieldValue release];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 11:
        if (fieldType == TType_STRING) {
          NSString * fieldValue = [inProtocol readString];
          [self setFeature_type: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 12:
        if (fieldType == TType_STRING) {
          NSString * fieldValue = [inProtocol readString];
          [self setTraining_mode: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 13:
        if (fieldType == TType_STRING) {
          NSString * fieldValue = [inProtocol readString];
          [self setExt: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      default:
        [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        break;
    }
    [inProtocol readFieldEnd];
  }
  [inProtocol readStructEnd];
}

- (void) write: (id <TProtocol>) outProtocol {
  [outProtocol writeStructBeginWithName: @"AddPhotoRequest"];
  if (__api_id_isset) {
    if (__api_id != nil) {
      [outProtocol writeFieldBeginWithName: @"api_id" type: TType_STRING fieldID: 1];
      [outProtocol writeString: __api_id];
      [outProtocol writeFieldEnd];
    }
  }
  if (__name_space_isset) {
    if (__name_space != nil) {
      [outProtocol writeFieldBeginWithName: @"name_space" type: TType_STRING fieldID: 2];
      [outProtocol writeString: __name_space];
      [outProtocol writeFieldEnd];
    }
  }
  if (__user_id_isset) {
    if (__user_id != nil) {
      [outProtocol writeFieldBeginWithName: @"user_id" type: TType_STRING fieldID: 3];
      [outProtocol writeString: __user_id];
      [outProtocol writeFieldEnd];
    }
  }
  if (__tags_isset) {
    if (__tags != nil) {
      [outProtocol writeFieldBeginWithName: @"tags" type: TType_LIST fieldID: 4];
      {
        [outProtocol writeListBeginWithElementType: TType_STRING size: [__tags count]];
        int i19;
        for (i19 = 0; i19 < [__tags count]; i19++)
        {
          [outProtocol writeString: [__tags objectAtIndex: i19]];
        }
        [outProtocol writeListEnd];
      }
      [outProtocol writeFieldEnd];
    }
  }
  if (__rawimages_isset) {
    if (__rawimages != nil) {
      [outProtocol writeFieldBeginWithName: @"rawimages" type: TType_LIST fieldID: 5];
      {
        [outProtocol writeListBeginWithElementType: TType_STRING size: __rawimage_num ];
        int i21;
        for (i21 = 0; i21 < __rawimage_num; i21++)
        {
            @try {
                [outProtocol writeCString:__rawimages[i21] writeLength:__rawimage_lengths[i21]];
            }
            @catch (TTransportException *exception) {
                NSLog(@"TTransportException: Error writing to transport output stream.");
            }
          
        }
        [outProtocol writeListEnd];
      }
      [outProtocol writeFieldEnd];
    }
  }
  if (__imagefeatures_isset) {
    if (__imagefeatures != nil) {
      [outProtocol writeFieldBeginWithName: @"imagefeatures" type: TType_LIST fieldID: 6];
      {
        [outProtocol writeListBeginWithElementType: TType_LIST size: [__imagefeatures count]];
        int i23;
        for (i23 = 0; i23 < [__imagefeatures count]; i23++)
        {
          {
            [outProtocol writeListBeginWithElementType: TType_DOUBLE size: [[__imagefeatures objectAtIndex: i23] count]];
            int i25;
            for (i25 = 0; i25 < [[__imagefeatures objectAtIndex: i23] count]; i25++)
            {
              [outProtocol writeDouble: [[[__imagefeatures objectAtIndex: i23] objectAtIndex: i25] doubleValue]];
            }
            [outProtocol writeListEnd];
          }
        }
        [outProtocol writeListEnd];
      }
      [outProtocol writeFieldEnd];
    }
  }
  if (__margin_isset) {
    [outProtocol writeFieldBeginWithName: @"margin" type: TType_DOUBLE fieldID: 7];
    [outProtocol writeDouble: __margin];
    [outProtocol writeFieldEnd];
  }
  if (__face_detecion_isset) {
    [outProtocol writeFieldBeginWithName: @"face_detecion" type: TType_DOUBLE fieldID: 8];
    [outProtocol writeDouble: __face_detecion];
    [outProtocol writeFieldEnd];
  }
  if (__urls_isset) {
    if (__urls != nil) {
      [outProtocol writeFieldBeginWithName: @"urls" type: TType_LIST fieldID: 9];
      {
        [outProtocol writeListBeginWithElementType: TType_STRING size: [__urls count]];
        int i27;
        for (i27 = 0; i27 < [__urls count]; i27++)
        {
          [outProtocol writeString: [__urls objectAtIndex: i27]];
        }
        [outProtocol writeListEnd];
      }
      [outProtocol writeFieldEnd];
    }
  }
  if (__file_name_isset) {
    if (__file_name != nil) {
      [outProtocol writeFieldBeginWithName: @"file_name" type: TType_LIST fieldID: 10];
      {
        [outProtocol writeListBeginWithElementType: TType_STRING size: [__file_name count]];
        int i29;
        for (i29 = 0; i29 < [__file_name count]; i29++)
        {
          [outProtocol writeString: [__file_name objectAtIndex: i29]];
        }
        [outProtocol writeListEnd];
      }
      [outProtocol writeFieldEnd];
    }
  }
  if (__feature_type_isset) {
    if (__feature_type != nil) {
      [outProtocol writeFieldBeginWithName: @"feature_type" type: TType_STRING fieldID: 11];
      [outProtocol writeString: __feature_type];
      [outProtocol writeFieldEnd];
    }
  }
  if (__training_mode_isset) {
    if (__training_mode != nil) {
      [outProtocol writeFieldBeginWithName: @"training_mode" type: TType_STRING fieldID: 12];
      [outProtocol writeString: __training_mode];
      [outProtocol writeFieldEnd];
    }
  }
  if (__ext_isset) {
    if (__ext != nil) {
      [outProtocol writeFieldBeginWithName: @"ext" type: TType_STRING fieldID: 13];
      [outProtocol writeString: __ext];
      [outProtocol writeFieldEnd];
    }
  }
  [outProtocol writeFieldStop];
  [outProtocol writeStructEnd];
}

- (NSString *) description {
  NSMutableString * ms = [NSMutableString stringWithString: @"AddPhotoRequest("];
  [ms appendString: @"api_id:"];
  [ms appendFormat: @"\"%@\"", __api_id];
  [ms appendString: @",name_space:"];
  [ms appendFormat: @"\"%@\"", __name_space];
  [ms appendString: @",user_id:"];
  [ms appendFormat: @"\"%@\"", __user_id];
  [ms appendString: @",tags:"];
  [ms appendFormat: @"%@", __tags];
  [ms appendString: @",imagefeatures:"];
  [ms appendFormat: @"%@", __imagefeatures];
  [ms appendString: @",margin:"];
  [ms appendFormat: @"%f", __margin];
  [ms appendString: @",face_detecion:"];
  [ms appendFormat: @"%f", __face_detecion];
  [ms appendString: @",urls:"];
  [ms appendFormat: @"%@", __urls];
  [ms appendString: @",file_name:"];
  [ms appendFormat: @"%@", __file_name];
  [ms appendString: @",feature_type:"];
  [ms appendFormat: @"\"%@\"", __feature_type];
  [ms appendString: @",training_mode:"];
  [ms appendFormat: @"\"%@\"", __training_mode];
  [ms appendString: @",ext:"];
  [ms appendFormat: @"\"%@\"", __ext];
  [ms appendString: @")"];
  return [NSString stringWithString: ms];
}

@end

@implementation TrainRequest

- (id) initWithApi_id: (NSString *) api_id name_space: (NSString *) name_space user_id: (NSString *) user_id tags: (NSArray *) tags feature_type: (NSString *) feature_type training_mode: (NSString *) training_mode ext: (NSString *) ext
{
  self = [super init];
  __api_id = [api_id retain];
  __api_id_isset = YES;
  __name_space = [name_space retain];
  __name_space_isset = YES;
  __user_id = [user_id retain];
  __user_id_isset = YES;
  __tags = [tags retain];
  __tags_isset = YES;
  __feature_type = [feature_type retain];
  __feature_type_isset = YES;
  __training_mode = [training_mode retain];
  __training_mode_isset = YES;
  __ext = [ext retain];
  __ext_isset = YES;
  return self;
}

- (id) initWithCoder: (NSCoder *) decoder
{
  self = [super init];
  if ([decoder containsValueForKey: @"api_id"])
  {
    __api_id = [[decoder decodeObjectForKey: @"api_id"] retain];
    __api_id_isset = YES;
  }
  if ([decoder containsValueForKey: @"name_space"])
  {
    __name_space = [[decoder decodeObjectForKey: @"name_space"] retain];
    __name_space_isset = YES;
  }
  if ([decoder containsValueForKey: @"user_id"])
  {
    __user_id = [[decoder decodeObjectForKey: @"user_id"] retain];
    __user_id_isset = YES;
  }
  if ([decoder containsValueForKey: @"tags"])
  {
    __tags = [[decoder decodeObjectForKey: @"tags"] retain];
    __tags_isset = YES;
  }
  if ([decoder containsValueForKey: @"feature_type"])
  {
    __feature_type = [[decoder decodeObjectForKey: @"feature_type"] retain];
    __feature_type_isset = YES;
  }
  if ([decoder containsValueForKey: @"training_mode"])
  {
    __training_mode = [[decoder decodeObjectForKey: @"training_mode"] retain];
    __training_mode_isset = YES;
  }
  if ([decoder containsValueForKey: @"ext"])
  {
    __ext = [[decoder decodeObjectForKey: @"ext"] retain];
    __ext_isset = YES;
  }
  return self;
}

- (void) encodeWithCoder: (NSCoder *) encoder
{
  if (__api_id_isset)
  {
    [encoder encodeObject: __api_id forKey: @"api_id"];
  }
  if (__name_space_isset)
  {
    [encoder encodeObject: __name_space forKey: @"name_space"];
  }
  if (__user_id_isset)
  {
    [encoder encodeObject: __user_id forKey: @"user_id"];
  }
  if (__tags_isset)
  {
    [encoder encodeObject: __tags forKey: @"tags"];
  }
  if (__feature_type_isset)
  {
    [encoder encodeObject: __feature_type forKey: @"feature_type"];
  }
  if (__training_mode_isset)
  {
    [encoder encodeObject: __training_mode forKey: @"training_mode"];
  }
  if (__ext_isset)
  {
    [encoder encodeObject: __ext forKey: @"ext"];
  }
}

- (void) dealloc
{
  [__api_id release];
  [__name_space release];
  [__user_id release];
  [__tags release];
  [__feature_type release];
  [__training_mode release];
  [__ext release];
  [super dealloc];
}

- (NSString *) api_id {
  return [[__api_id retain] autorelease];
}

- (void) setApi_id: (NSString *) api_id {
  [api_id retain];
  [__api_id release];
  __api_id = api_id;
  __api_id_isset = YES;
}

- (BOOL) api_idIsSet {
  return __api_id_isset;
}

- (void) unsetApi_id {
  [__api_id release];
  __api_id = nil;
  __api_id_isset = NO;
}

- (NSString *) name_space {
  return [[__name_space retain] autorelease];
}

- (void) setName_space: (NSString *) name_space {
  [name_space retain];
  [__name_space release];
  __name_space = name_space;
  __name_space_isset = YES;
}

- (BOOL) name_spaceIsSet {
  return __name_space_isset;
}

- (void) unsetName_space {
  [__name_space release];
  __name_space = nil;
  __name_space_isset = NO;
}

- (NSString *) user_id {
  return [[__user_id retain] autorelease];
}

- (void) setUser_id: (NSString *) user_id {
  [user_id retain];
  [__user_id release];
  __user_id = user_id;
  __user_id_isset = YES;
}

- (BOOL) user_idIsSet {
  return __user_id_isset;
}

- (void) unsetUser_id {
  [__user_id release];
  __user_id = nil;
  __user_id_isset = NO;
}

- (NSArray *) tags {
  return [[__tags retain] autorelease];
}

- (void) setTags: (NSArray *) tags {
  [tags retain];
  [__tags release];
  __tags = tags;
  __tags_isset = YES;
}

- (BOOL) tagsIsSet {
  return __tags_isset;
}

- (void) unsetTags {
  [__tags release];
  __tags = nil;
  __tags_isset = NO;
}

- (NSString *) feature_type {
  return [[__feature_type retain] autorelease];
}

- (void) setFeature_type: (NSString *) feature_type {
  [feature_type retain];
  [__feature_type release];
  __feature_type = feature_type;
  __feature_type_isset = YES;
}

- (BOOL) feature_typeIsSet {
  return __feature_type_isset;
}

- (void) unsetFeature_type {
  [__feature_type release];
  __feature_type = nil;
  __feature_type_isset = NO;
}

- (NSString *) training_mode {
  return [[__training_mode retain] autorelease];
}

- (void) setTraining_mode: (NSString *) training_mode {
  [training_mode retain];
  [__training_mode release];
  __training_mode = training_mode;
  __training_mode_isset = YES;
}

- (BOOL) training_modeIsSet {
  return __training_mode_isset;
}

- (void) unsetTraining_mode {
  [__training_mode release];
  __training_mode = nil;
  __training_mode_isset = NO;
}

- (NSString *) ext {
  return [[__ext retain] autorelease];
}

- (void) setExt: (NSString *) ext {
  [ext retain];
  [__ext release];
  __ext = ext;
  __ext_isset = YES;
}

- (BOOL) extIsSet {
  return __ext_isset;
}

- (void) unsetExt {
  [__ext release];
  __ext = nil;
  __ext_isset = NO;
}

- (void) read: (id <TProtocol>) inProtocol
{
  NSString * fieldName;
  int fieldType;
  int fieldID;

  [inProtocol readStructBeginReturningName: NULL];
  while (true)
  {
    [inProtocol readFieldBeginReturningName: &fieldName type: &fieldType fieldID: &fieldID];
    if (fieldType == TType_STOP) { 
      break;
    }
    switch (fieldID)
    {
      case 1:
        if (fieldType == TType_STRING) {
          NSString * fieldValue = [inProtocol readString];
          [self setApi_id: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 2:
        if (fieldType == TType_STRING) {
          NSString * fieldValue = [inProtocol readString];
          [self setName_space: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 3:
        if (fieldType == TType_STRING) {
          NSString * fieldValue = [inProtocol readString];
          [self setUser_id: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 4:
        if (fieldType == TType_LIST) {
          int _size30;
          [inProtocol readListBeginReturningElementType: NULL size: &_size30];
          NSMutableArray * fieldValue = [[NSMutableArray alloc] initWithCapacity: _size30];
          int _i31;
          for (_i31 = 0; _i31 < _size30; ++_i31)
          {
            NSString * _elem32 = [inProtocol readString];
            [fieldValue addObject: _elem32];
          }
          [inProtocol readListEnd];
          [self setTags: fieldValue];
          [fieldValue release];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 5:
        if (fieldType == TType_STRING) {
          NSString * fieldValue = [inProtocol readString];
          [self setFeature_type: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 6:
        if (fieldType == TType_STRING) {
          NSString * fieldValue = [inProtocol readString];
          [self setTraining_mode: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 7:
        if (fieldType == TType_STRING) {
          NSString * fieldValue = [inProtocol readString];
          [self setExt: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      default:
        [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        break;
    }
    [inProtocol readFieldEnd];
  }
  [inProtocol readStructEnd];
}

- (void) write: (id <TProtocol>) outProtocol {
  [outProtocol writeStructBeginWithName: @"TrainRequest"];
  if (__api_id_isset) {
    if (__api_id != nil) {
      [outProtocol writeFieldBeginWithName: @"api_id" type: TType_STRING fieldID: 1];
      [outProtocol writeString: __api_id];
      [outProtocol writeFieldEnd];
    }
  }
  if (__name_space_isset) {
    if (__name_space != nil) {
      [outProtocol writeFieldBeginWithName: @"name_space" type: TType_STRING fieldID: 2];
      [outProtocol writeString: __name_space];
      [outProtocol writeFieldEnd];
    }
  }
  if (__user_id_isset) {
    if (__user_id != nil) {
      [outProtocol writeFieldBeginWithName: @"user_id" type: TType_STRING fieldID: 3];
      [outProtocol writeString: __user_id];
      [outProtocol writeFieldEnd];
    }
  }
  if (__tags_isset) {
    if (__tags != nil) {
      [outProtocol writeFieldBeginWithName: @"tags" type: TType_LIST fieldID: 4];
      {
        [outProtocol writeListBeginWithElementType: TType_STRING size: [__tags count]];
        int i34;
        for (i34 = 0; i34 < [__tags count]; i34++)
        {
          [outProtocol writeString: [__tags objectAtIndex: i34]];
        }
        [outProtocol writeListEnd];
      }
      [outProtocol writeFieldEnd];
    }
  }
  if (__feature_type_isset) {
    if (__feature_type != nil) {
      [outProtocol writeFieldBeginWithName: @"feature_type" type: TType_STRING fieldID: 5];
      [outProtocol writeString: __feature_type];
      [outProtocol writeFieldEnd];
    }
  }
  if (__training_mode_isset) {
    if (__training_mode != nil) {
      [outProtocol writeFieldBeginWithName: @"training_mode" type: TType_STRING fieldID: 6];
      [outProtocol writeString: __training_mode];
      [outProtocol writeFieldEnd];
    }
  }
  if (__ext_isset) {
    if (__ext != nil) {
      [outProtocol writeFieldBeginWithName: @"ext" type: TType_STRING fieldID: 7];
      [outProtocol writeString: __ext];
      [outProtocol writeFieldEnd];
    }
  }
  [outProtocol writeFieldStop];
  [outProtocol writeStructEnd];
}

- (NSString *) description {
  NSMutableString * ms = [NSMutableString stringWithString: @"TrainRequest("];
  [ms appendString: @"api_id:"];
  [ms appendFormat: @"\"%@\"", __api_id];
  [ms appendString: @",name_space:"];
  [ms appendFormat: @"\"%@\"", __name_space];
  [ms appendString: @",user_id:"];
  [ms appendFormat: @"\"%@\"", __user_id];
  [ms appendString: @",tags:"];
  [ms appendFormat: @"%@", __tags];
  [ms appendString: @",feature_type:"];
  [ms appendFormat: @"\"%@\"", __feature_type];
  [ms appendString: @",training_mode:"];
  [ms appendFormat: @"\"%@\"", __training_mode];
  [ms appendString: @",ext:"];
  [ms appendFormat: @"\"%@\"", __ext];
  [ms appendString: @")"];
  return [NSString stringWithString: ms];
}

@end

@implementation RecognizeRequest

- (id) initWithApi_id: (NSString *) api_id name_space: (NSString *) name_space user_id: (NSString *) user_id imagefeatures: (NSArray *) imagefeatures rawimages: (char **) rawimages rawimage_lengths: (int32_t *) rawimage_lengths tags: (NSArray *) tags feature_type: (NSString *) feature_type training_mode: (NSString *) training_mode ext: (NSString *) ext
{
  self = [super init];
  __api_id = [api_id retain];
  __api_id_isset = YES;
  __name_space = [name_space retain];
  __name_space_isset = YES;
  __user_id = [user_id retain];
  __user_id_isset = YES;
  __imagefeatures = [imagefeatures retain];
  __imagefeatures_isset = YES;
  __rawimages = rawimages;
  __rawimages_isset = YES;
  __rawimage_lengths = rawimage_lengths;
  __rawimage_lengths_isset = YES;
  __tags = [tags retain];
  __tags_isset = YES;
  __feature_type = [feature_type retain];
  __feature_type_isset = YES;
  __training_mode = [training_mode retain];
  __training_mode_isset = YES;
  __ext = [ext retain];
  __ext_isset = YES;
  return self;
}

- (id) initWithCoder: (NSCoder *) decoder
{
  self = [super init];
  if ([decoder containsValueForKey: @"api_id"])
  {
    __api_id = [[decoder decodeObjectForKey: @"api_id"] retain];
    __api_id_isset = YES;
  }
  if ([decoder containsValueForKey: @"name_space"])
  {
    __name_space = [[decoder decodeObjectForKey: @"name_space"] retain];
    __name_space_isset = YES;
  }
  if ([decoder containsValueForKey: @"user_id"])
  {
    __user_id = [[decoder decodeObjectForKey: @"user_id"] retain];
    __user_id_isset = YES;
  }
  if ([decoder containsValueForKey: @"imagefeatures"])
  {
    __imagefeatures = [[decoder decodeObjectForKey: @"imagefeatures"] retain];
    __imagefeatures_isset = YES;
  }
  if ([decoder containsValueForKey: @"tags"])
  {
    __tags = [[decoder decodeObjectForKey: @"tags"] retain];
    __tags_isset = YES;
  }
  if ([decoder containsValueForKey: @"feature_type"])
  {
    __feature_type = [[decoder decodeObjectForKey: @"feature_type"] retain];
    __feature_type_isset = YES;
  }
  if ([decoder containsValueForKey: @"training_mode"])
  {
    __training_mode = [[decoder decodeObjectForKey: @"training_mode"] retain];
    __training_mode_isset = YES;
  }
  if ([decoder containsValueForKey: @"ext"])
  {
    __ext = [[decoder decodeObjectForKey: @"ext"] retain];
    __ext_isset = YES;
  }
  return self;
}

- (void) encodeWithCoder: (NSCoder *) encoder
{
  if (__api_id_isset)
  {
    [encoder encodeObject: __api_id forKey: @"api_id"];
  }
  if (__name_space_isset)
  {
    [encoder encodeObject: __name_space forKey: @"name_space"];
  }
  if (__user_id_isset)
  {
    [encoder encodeObject: __user_id forKey: @"user_id"];
  }
  if (__imagefeatures_isset)
  {
    [encoder encodeObject: __imagefeatures forKey: @"imagefeatures"];
  }
  if (__tags_isset)
  {
    [encoder encodeObject: __tags forKey: @"tags"];
  }
  if (__feature_type_isset)
  {
    [encoder encodeObject: __feature_type forKey: @"feature_type"];
  }
  if (__training_mode_isset)
  {
    [encoder encodeObject: __training_mode forKey: @"training_mode"];
  }
  if (__ext_isset)
  {
    [encoder encodeObject: __ext forKey: @"ext"];
  }
}

- (void) dealloc
{
  [__api_id release];
  [__name_space release];
  [__user_id release];
  [__imagefeatures release];
  [__tags release];
  [__feature_type release];
  [__training_mode release];
  [__ext release];
  [super dealloc];
}

- (NSString *) api_id {
  return [[__api_id retain] autorelease];
}

- (void) setApi_id: (NSString *) api_id {
  [api_id retain];
  [__api_id release];
  __api_id = api_id;
  __api_id_isset = YES;
}

- (BOOL) api_idIsSet {
  return __api_id_isset;
}

- (void) unsetApi_id {
  [__api_id release];
  __api_id = nil;
  __api_id_isset = NO;
}

- (NSString *) name_space {
  return [[__name_space retain] autorelease];
}

- (void) setName_space: (NSString *) name_space {
  [name_space retain];
  [__name_space release];
  __name_space = name_space;
  __name_space_isset = YES;
}

- (BOOL) name_spaceIsSet {
  return __name_space_isset;
}

- (void) unsetName_space {
  [__name_space release];
  __name_space = nil;
  __name_space_isset = NO;
}

- (NSString *) user_id {
  return [[__user_id retain] autorelease];
}

- (void) setUser_id: (NSString *) user_id {
  [user_id retain];
  [__user_id release];
  __user_id = user_id;
  __user_id_isset = YES;
}

- (BOOL) user_idIsSet {
  return __user_id_isset;
}

- (void) unsetUser_id {
  [__user_id release];
  __user_id = nil;
  __user_id_isset = NO;
}

- (NSArray *) imagefeatures {
  return [[__imagefeatures retain] autorelease];
}

- (void) setImagefeatures: (NSArray *) imagefeatures {
  [imagefeatures retain];
  [__imagefeatures release];
  __imagefeatures = imagefeatures;
  __imagefeatures_isset = YES;
}

- (BOOL) imagefeaturesIsSet {
  return __imagefeatures_isset;
}

- (void) unsetImagefeatures {
  [__imagefeatures release];
  __imagefeatures = nil;
  __imagefeatures_isset = NO;
}

- (char **) rawimages {
  return __rawimages;
}

- (void) setRawimages: (char **) rawimages {
  __rawimages = rawimages;
  __rawimages_isset = YES;
}

- (BOOL) rawimagesIsSet {
  return __rawimages_isset;
}

- (void) unsetRawimages {
  __rawimages = nil;
  __rawimages_isset = NO;
}

- (int32_t *) rawimage_lengths {
    return __rawimage_lengths;
}

- (void) setRawimage_lengths: (int32_t *) rawimage_lengths {
    __rawimage_lengths = rawimage_lengths;
    __rawimage_lengths_isset = YES;
}

- (BOOL) rawimage_lengthsIsSet {
    return __rawimage_lengths_isset;
}

- (void) unsetRawimage_lengths {
    __rawimage_lengths = nil;
    __rawimages_isset = NO;
}


- (NSArray *) tags {
  return [[__tags retain] autorelease];
}

- (void) setTags: (NSArray *) tags {
  [tags retain];
  [__tags release];
  __tags = tags;
  __tags_isset = YES;
}

- (BOOL) tagsIsSet {
  return __tags_isset;
}

- (void) unsetTags {
  [__tags release];
  __tags = nil;
  __tags_isset = NO;
}

- (NSString *) feature_type {
  return [[__feature_type retain] autorelease];
}

- (void) setFeature_type: (NSString *) feature_type {
  [feature_type retain];
  [__feature_type release];
  __feature_type = feature_type;
  __feature_type_isset = YES;
}

- (BOOL) feature_typeIsSet {
  return __feature_type_isset;
}

- (void) unsetFeature_type {
  [__feature_type release];
  __feature_type = nil;
  __feature_type_isset = NO;
}

- (NSString *) training_mode {
  return [[__training_mode retain] autorelease];
}

- (void) setTraining_mode: (NSString *) training_mode {
  [training_mode retain];
  [__training_mode release];
  __training_mode = training_mode;
  __training_mode_isset = YES;
}

- (BOOL) training_modeIsSet {
  return __training_mode_isset;
}

- (void) unsetTraining_mode {
  [__training_mode release];
  __training_mode = nil;
  __training_mode_isset = NO;
}

- (NSString *) ext {
  return [[__ext retain] autorelease];
}

- (void) setExt: (NSString *) ext {
  [ext retain];
  [__ext release];
  __ext = ext;
  __ext_isset = YES;
}

- (BOOL) extIsSet {
  return __ext_isset;
}

- (void) unsetExt {
  [__ext release];
  __ext = nil;
  __ext_isset = NO;
}

- (void) read: (id <TProtocol>) inProtocol
{
  NSString * fieldName;
  int fieldType;
  int fieldID;

  [inProtocol readStructBeginReturningName: NULL];
  while (true)
  {
    [inProtocol readFieldBeginReturningName: &fieldName type: &fieldType fieldID: &fieldID];
    if (fieldType == TType_STOP) { 
      break;
    }
    switch (fieldID)
    {
      case 1:
        if (fieldType == TType_STRING) {
          NSString * fieldValue = [inProtocol readString];
          [self setApi_id: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 2:
        if (fieldType == TType_STRING) {
          NSString * fieldValue = [inProtocol readString];
          [self setName_space: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 3:
        if (fieldType == TType_STRING) {
          NSString * fieldValue = [inProtocol readString];
          [self setUser_id: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 4:
        if (fieldType == TType_LIST) {
          int _size35;
          [inProtocol readListBeginReturningElementType: NULL size: &_size35];
          NSMutableArray * fieldValue = [[NSMutableArray alloc] initWithCapacity: _size35];
          int _i36;
          for (_i36 = 0; _i36 < _size35; ++_i36)
          {
            int _size38;
            [inProtocol readListBeginReturningElementType: NULL size: &_size38];
            NSMutableArray * _elem37 = [[NSMutableArray alloc] initWithCapacity: _size38];
            int _i39;
            for (_i39 = 0; _i39 < _size38; ++_i39)
            {
              double _elem40 = [inProtocol readDouble];
              [_elem37 addObject: [NSNumber numberWithDouble: _elem40]];
            }
            [inProtocol readListEnd];
            [fieldValue addObject: _elem37];
            [_elem37 release];
          }
          [inProtocol readListEnd];
          [self setImagefeatures: fieldValue];
          [fieldValue release];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 5:
        if (fieldType == TType_LIST) {
          int _size41;
          [inProtocol readListBeginReturningElementType: NULL size: &_size41];
          NSMutableArray * fieldValue = [[NSMutableArray alloc] initWithCapacity: _size41];
          int _i42;
          for (_i42 = 0; _i42 < _size41; ++_i42)
          {
            NSString * _elem43 = [inProtocol readString];
            [fieldValue addObject: _elem43];
          }
          [inProtocol readListEnd];
    //      [self setRawimages: fieldValue];
          [fieldValue release];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 6:
        if (fieldType == TType_LIST) {
          int _size44;
          [inProtocol readListBeginReturningElementType: NULL size: &_size44];
          NSMutableArray * fieldValue = [[NSMutableArray alloc] initWithCapacity: _size44];
          int _i45;
          for (_i45 = 0; _i45 < _size44; ++_i45)
          {
            NSString * _elem46 = [inProtocol readString];
            [fieldValue addObject: _elem46];
          }
          [inProtocol readListEnd];
          [self setTags: fieldValue];
          [fieldValue release];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 7:
        if (fieldType == TType_STRING) {
          NSString * fieldValue = [inProtocol readString];
          [self setFeature_type: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 8:
        if (fieldType == TType_STRING) {
          NSString * fieldValue = [inProtocol readString];
          [self setTraining_mode: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 9:
        if (fieldType == TType_STRING) {
          NSString * fieldValue = [inProtocol readString];
          [self setExt: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      default:
        [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        break;
    }
    [inProtocol readFieldEnd];
  }
  [inProtocol readStructEnd];
}

- (void) write: (id <TProtocol>) outProtocol {
  [outProtocol writeStructBeginWithName: @"RecognizeRequest"];
  if (__api_id_isset) {
    if (__api_id != nil) {
      [outProtocol writeFieldBeginWithName: @"api_id" type: TType_STRING fieldID: 1];
      [outProtocol writeString: __api_id];
      [outProtocol writeFieldEnd];
    }
  }
  if (__name_space_isset) {
    if (__name_space != nil) {
      [outProtocol writeFieldBeginWithName: @"name_space" type: TType_STRING fieldID: 2];
      [outProtocol writeString: __name_space];
      [outProtocol writeFieldEnd];
    }
  }
  if (__user_id_isset) {
    if (__user_id != nil) {
      [outProtocol writeFieldBeginWithName: @"user_id" type: TType_STRING fieldID: 3];
      [outProtocol writeString: __user_id];
      [outProtocol writeFieldEnd];
    }
  }
  if (__imagefeatures_isset) {
    if (__imagefeatures != nil) {
      [outProtocol writeFieldBeginWithName: @"imagefeatures" type: TType_LIST fieldID: 4];
      {
        [outProtocol writeListBeginWithElementType: TType_LIST size: [__imagefeatures count]];
        int i48;
        for (i48 = 0; i48 < [__imagefeatures count]; i48++)
        {
          {
            [outProtocol writeListBeginWithElementType: TType_DOUBLE size: [[__imagefeatures objectAtIndex: i48] count]];
            int i50;
            for (i50 = 0; i50 < [[__imagefeatures objectAtIndex: i48] count]; i50++)
            {
              [outProtocol writeDouble: [[[__imagefeatures objectAtIndex: i48] objectAtIndex: i50] doubleValue]];
            }
            [outProtocol writeListEnd];
          }
        }
        [outProtocol writeListEnd];
      }
      [outProtocol writeFieldEnd];
    }
  }
  if (__rawimages_isset) {
    if (__rawimages != nil) {
      [outProtocol writeFieldBeginWithName: @"rawimages" type: TType_LIST fieldID: 5];
      {
        [outProtocol writeListBeginWithElementType: TType_STRING size: sizeof(__rawimage_lengths)/sizeof(int32_t *)];
        int i52;
        for (i52 = 0; i52 < sizeof(__rawimage_lengths)/sizeof(int32_t *); i52++)
        {
            @try {
                [outProtocol writeCString: __rawimages[i52] writeLength: __rawimage_lengths[i52]];
            }
            @catch (TTransportException *exception) {
                NSLog(@"TTransportException: Error writing to transport output stream.");
            }

        }
        [outProtocol writeListEnd];
      }
      [outProtocol writeFieldEnd];
    }
  }
  if (__tags_isset) {
    if (__tags != nil) {
      [outProtocol writeFieldBeginWithName: @"tags" type: TType_LIST fieldID: 6];
      {
        [outProtocol writeListBeginWithElementType: TType_STRING size: [__tags count]];
        int i54;
        for (i54 = 0; i54 < [__tags count]; i54++)
        {
          [outProtocol writeString: [__tags objectAtIndex: i54]];
        }
        [outProtocol writeListEnd];
      }
      [outProtocol writeFieldEnd];
    }
  }
  if (__feature_type_isset) {
    if (__feature_type != nil) {
      [outProtocol writeFieldBeginWithName: @"feature_type" type: TType_STRING fieldID: 7];
      [outProtocol writeString: __feature_type];
      [outProtocol writeFieldEnd];
    }
  }
  if (__training_mode_isset) {
    if (__training_mode != nil) {
      [outProtocol writeFieldBeginWithName: @"training_mode" type: TType_STRING fieldID: 8];
      [outProtocol writeString: __training_mode];
      [outProtocol writeFieldEnd];
    }
  }
  if (__ext_isset) {
    if (__ext != nil) {
      [outProtocol writeFieldBeginWithName: @"ext" type: TType_STRING fieldID: 9];
      [outProtocol writeString: __ext];
      [outProtocol writeFieldEnd];
    }
  }
  [outProtocol writeFieldStop];
  [outProtocol writeStructEnd];
}

- (NSString *) description {
  NSMutableString * ms = [NSMutableString stringWithString: @"RecognizeRequest("];
  [ms appendString: @"api_id:"];
  [ms appendFormat: @"\"%@\"", __api_id];
  [ms appendString: @",name_space:"];
  [ms appendFormat: @"\"%@\"", __name_space];
  [ms appendString: @",user_id:"];
  [ms appendFormat: @"\"%@\"", __user_id];
  [ms appendString: @",imagefeatures:"];
  [ms appendFormat: @"%@", __imagefeatures];
  [ms appendString: @",tags:"];
  [ms appendFormat: @"%@", __tags];
  [ms appendString: @",feature_type:"];
  [ms appendFormat: @"\"%@\"", __feature_type];
  [ms appendString: @",training_mode:"];
  [ms appendFormat: @"\"%@\"", __training_mode];
  [ms appendString: @",ext:"];
  [ms appendFormat: @"\"%@\"", __ext];
  [ms appendString: @")"];
  return [NSString stringWithString: ms];
}

@end

@implementation RecognizeResponse

- (id) initWithTags: (NSArray *) tags api_id: (NSString *) api_id name_space: (NSString *) name_space user_id: (NSString *) user_id ext: (NSString *) ext
{
  self = [super init];
  __tags = [tags retain];
  __tags_isset = YES;
  __api_id = [api_id retain];
  __api_id_isset = YES;
  __name_space = [name_space retain];
  __name_space_isset = YES;
  __user_id = [user_id retain];
  __user_id_isset = YES;
  __ext = [ext retain];
  __ext_isset = YES;
  return self;
}

- (id) initWithCoder: (NSCoder *) decoder
{
  self = [super init];
  if ([decoder containsValueForKey: @"tags"])
  {
    __tags = [[decoder decodeObjectForKey: @"tags"] retain];
    __tags_isset = YES;
  }
  if ([decoder containsValueForKey: @"api_id"])
  {
    __api_id = [[decoder decodeObjectForKey: @"api_id"] retain];
    __api_id_isset = YES;
  }
  if ([decoder containsValueForKey: @"name_space"])
  {
    __name_space = [[decoder decodeObjectForKey: @"name_space"] retain];
    __name_space_isset = YES;
  }
  if ([decoder containsValueForKey: @"user_id"])
  {
    __user_id = [[decoder decodeObjectForKey: @"user_id"] retain];
    __user_id_isset = YES;
  }
  if ([decoder containsValueForKey: @"ext"])
  {
    __ext = [[decoder decodeObjectForKey: @"ext"] retain];
    __ext_isset = YES;
  }
  return self;
}

- (void) encodeWithCoder: (NSCoder *) encoder
{
  if (__tags_isset)
  {
    [encoder encodeObject: __tags forKey: @"tags"];
  }
  if (__api_id_isset)
  {
    [encoder encodeObject: __api_id forKey: @"api_id"];
  }
  if (__name_space_isset)
  {
    [encoder encodeObject: __name_space forKey: @"name_space"];
  }
  if (__user_id_isset)
  {
    [encoder encodeObject: __user_id forKey: @"user_id"];
  }
  if (__ext_isset)
  {
    [encoder encodeObject: __ext forKey: @"ext"];
  }
}

- (void) dealloc
{
  [__tags release];
  [__api_id release];
  [__name_space release];
  [__user_id release];
  [__ext release];
  [super dealloc];
}

- (NSArray *) tags {
  return [[__tags retain] autorelease];
}

- (void) setTags: (NSArray *) tags {
  [tags retain];
  [__tags release];
  __tags = tags;
  __tags_isset = YES;
}

- (BOOL) tagsIsSet {
  return __tags_isset;
}

- (void) unsetTags {
  [__tags release];
  __tags = nil;
  __tags_isset = NO;
}

- (NSString *) api_id {
  return [[__api_id retain] autorelease];
}

- (void) setApi_id: (NSString *) api_id {
  [api_id retain];
  [__api_id release];
  __api_id = api_id;
  __api_id_isset = YES;
}

- (BOOL) api_idIsSet {
  return __api_id_isset;
}

- (void) unsetApi_id {
  [__api_id release];
  __api_id = nil;
  __api_id_isset = NO;
}

- (NSString *) name_space {
  return [[__name_space retain] autorelease];
}

- (void) setName_space: (NSString *) name_space {
  [name_space retain];
  [__name_space release];
  __name_space = name_space;
  __name_space_isset = YES;
}

- (BOOL) name_spaceIsSet {
  return __name_space_isset;
}

- (void) unsetName_space {
  [__name_space release];
  __name_space = nil;
  __name_space_isset = NO;
}

- (NSString *) user_id {
  return [[__user_id retain] autorelease];
}

- (void) setUser_id: (NSString *) user_id {
  [user_id retain];
  [__user_id release];
  __user_id = user_id;
  __user_id_isset = YES;
}

- (BOOL) user_idIsSet {
  return __user_id_isset;
}

- (void) unsetUser_id {
  [__user_id release];
  __user_id = nil;
  __user_id_isset = NO;
}

- (NSString *) ext {
  return [[__ext retain] autorelease];
}

- (void) setExt: (NSString *) ext {
  [ext retain];
  [__ext release];
  __ext = ext;
  __ext_isset = YES;
}

- (BOOL) extIsSet {
  return __ext_isset;
}

- (void) unsetExt {
  [__ext release];
  __ext = nil;
  __ext_isset = NO;
}

- (void) read: (id <TProtocol>) inProtocol
{
  NSString * fieldName;
  int fieldType;
  int fieldID;

  [inProtocol readStructBeginReturningName: NULL];
  while (true)
  {
    [inProtocol readFieldBeginReturningName: &fieldName type: &fieldType fieldID: &fieldID];
    if (fieldType == TType_STOP) { 
      break;
    }
    switch (fieldID)
    {
      case 1:
        if (fieldType == TType_LIST) {
          int _size55;
          [inProtocol readListBeginReturningElementType: NULL size: &_size55];
          NSMutableArray * fieldValue = [[NSMutableArray alloc] initWithCapacity: _size55];
          int _i56;
          for (_i56 = 0; _i56 < _size55; ++_i56)
          {
            NSString * _elem57 = [inProtocol readString];
            [fieldValue addObject: _elem57];
          }
          [inProtocol readListEnd];
          [self setTags: fieldValue];
          [fieldValue release];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 2:
        if (fieldType == TType_STRING) {
          NSString * fieldValue = [inProtocol readString];
          [self setApi_id: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 3:
        if (fieldType == TType_STRING) {
          NSString * fieldValue = [inProtocol readString];
          [self setName_space: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 4:
        if (fieldType == TType_STRING) {
          NSString * fieldValue = [inProtocol readString];
          [self setUser_id: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 5:
        if (fieldType == TType_STRING) {
          NSString * fieldValue = [inProtocol readString];
          [self setExt: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      default:
        [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        break;
    }
    [inProtocol readFieldEnd];
  }
  [inProtocol readStructEnd];
}

- (void) write: (id <TProtocol>) outProtocol {
  [outProtocol writeStructBeginWithName: @"RecognizeResponse"];
  if (__tags_isset) {
    if (__tags != nil) {
      [outProtocol writeFieldBeginWithName: @"tags" type: TType_LIST fieldID: 1];
      {
        [outProtocol writeListBeginWithElementType: TType_STRING size: [__tags count]];
        int i59;
        for (i59 = 0; i59 < [__tags count]; i59++)
        {
          [outProtocol writeString: [__tags objectAtIndex: i59]];
        }
        [outProtocol writeListEnd];
      }
      [outProtocol writeFieldEnd];
    }
  }
  if (__api_id_isset) {
    if (__api_id != nil) {
      [outProtocol writeFieldBeginWithName: @"api_id" type: TType_STRING fieldID: 2];
      [outProtocol writeString: __api_id];
      [outProtocol writeFieldEnd];
    }
  }
  if (__name_space_isset) {
    if (__name_space != nil) {
      [outProtocol writeFieldBeginWithName: @"name_space" type: TType_STRING fieldID: 3];
      [outProtocol writeString: __name_space];
      [outProtocol writeFieldEnd];
    }
  }
  if (__user_id_isset) {
    if (__user_id != nil) {
      [outProtocol writeFieldBeginWithName: @"user_id" type: TType_STRING fieldID: 4];
      [outProtocol writeString: __user_id];
      [outProtocol writeFieldEnd];
    }
  }
  if (__ext_isset) {
    if (__ext != nil) {
      [outProtocol writeFieldBeginWithName: @"ext" type: TType_STRING fieldID: 5];
      [outProtocol writeString: __ext];
      [outProtocol writeFieldEnd];
    }
  }
  [outProtocol writeFieldStop];
  [outProtocol writeStructEnd];
}

- (NSString *) description {
  NSMutableString * ms = [NSMutableString stringWithString: @"RecognizeResponse("];
  [ms appendString: @"tags:"];
  [ms appendFormat: @"%@", __tags];
  [ms appendString: @",api_id:"];
  [ms appendFormat: @"\"%@\"", __api_id];
  [ms appendString: @",name_space:"];
  [ms appendFormat: @"\"%@\"", __name_space];
  [ms appendString: @",user_id:"];
  [ms appendFormat: @"\"%@\"", __user_id];
  [ms appendString: @",ext:"];
  [ms appendFormat: @"\"%@\"", __ext];
  [ms appendString: @")"];
  return [NSString stringWithString: ms];
}

@end

@implementation DatasetShowRequest

- (id) initWithApi_id: (NSString *) api_id name_space: (NSString *) name_space user_id: (NSString *) user_id tags: (NSArray *) tags options: (NSString *) options ext: (NSString *) ext
{
  self = [super init];
  __api_id = [api_id retain];
  __api_id_isset = YES;
  __name_space = [name_space retain];
  __name_space_isset = YES;
  __user_id = [user_id retain];
  __user_id_isset = YES;
  __tags = [tags retain];
  __tags_isset = YES;
  __options = [options retain];
  __options_isset = YES;
  __ext = [ext retain];
  __ext_isset = YES;
  return self;
}

- (id) initWithCoder: (NSCoder *) decoder
{
  self = [super init];
  if ([decoder containsValueForKey: @"api_id"])
  {
    __api_id = [[decoder decodeObjectForKey: @"api_id"] retain];
    __api_id_isset = YES;
  }
  if ([decoder containsValueForKey: @"name_space"])
  {
    __name_space = [[decoder decodeObjectForKey: @"name_space"] retain];
    __name_space_isset = YES;
  }
  if ([decoder containsValueForKey: @"user_id"])
  {
    __user_id = [[decoder decodeObjectForKey: @"user_id"] retain];
    __user_id_isset = YES;
  }
  if ([decoder containsValueForKey: @"tags"])
  {
    __tags = [[decoder decodeObjectForKey: @"tags"] retain];
    __tags_isset = YES;
  }
  if ([decoder containsValueForKey: @"options"])
  {
    __options = [[decoder decodeObjectForKey: @"options"] retain];
    __options_isset = YES;
  }
  if ([decoder containsValueForKey: @"ext"])
  {
    __ext = [[decoder decodeObjectForKey: @"ext"] retain];
    __ext_isset = YES;
  }
  return self;
}

- (void) encodeWithCoder: (NSCoder *) encoder
{
  if (__api_id_isset)
  {
    [encoder encodeObject: __api_id forKey: @"api_id"];
  }
  if (__name_space_isset)
  {
    [encoder encodeObject: __name_space forKey: @"name_space"];
  }
  if (__user_id_isset)
  {
    [encoder encodeObject: __user_id forKey: @"user_id"];
  }
  if (__tags_isset)
  {
    [encoder encodeObject: __tags forKey: @"tags"];
  }
  if (__options_isset)
  {
    [encoder encodeObject: __options forKey: @"options"];
  }
  if (__ext_isset)
  {
    [encoder encodeObject: __ext forKey: @"ext"];
  }
}

- (void) dealloc
{
  [__api_id release];
  [__name_space release];
  [__user_id release];
  [__tags release];
  [__options release];
  [__ext release];
  [super dealloc];
}

- (NSString *) api_id {
  return [[__api_id retain] autorelease];
}

- (void) setApi_id: (NSString *) api_id {
  [api_id retain];
  [__api_id release];
  __api_id = api_id;
  __api_id_isset = YES;
}

- (BOOL) api_idIsSet {
  return __api_id_isset;
}

- (void) unsetApi_id {
  [__api_id release];
  __api_id = nil;
  __api_id_isset = NO;
}

- (NSString *) name_space {
  return [[__name_space retain] autorelease];
}

- (void) setName_space: (NSString *) name_space {
  [name_space retain];
  [__name_space release];
  __name_space = name_space;
  __name_space_isset = YES;
}

- (BOOL) name_spaceIsSet {
  return __name_space_isset;
}

- (void) unsetName_space {
  [__name_space release];
  __name_space = nil;
  __name_space_isset = NO;
}

- (NSString *) user_id {
  return [[__user_id retain] autorelease];
}

- (void) setUser_id: (NSString *) user_id {
  [user_id retain];
  [__user_id release];
  __user_id = user_id;
  __user_id_isset = YES;
}

- (BOOL) user_idIsSet {
  return __user_id_isset;
}

- (void) unsetUser_id {
  [__user_id release];
  __user_id = nil;
  __user_id_isset = NO;
}

- (NSArray *) tags {
  return [[__tags retain] autorelease];
}

- (void) setTags: (NSArray *) tags {
  [tags retain];
  [__tags release];
  __tags = tags;
  __tags_isset = YES;
}

- (BOOL) tagsIsSet {
  return __tags_isset;
}

- (void) unsetTags {
  [__tags release];
  __tags = nil;
  __tags_isset = NO;
}

- (NSString *) options {
  return [[__options retain] autorelease];
}

- (void) setOptions: (NSString *) options {
  [options retain];
  [__options release];
  __options = options;
  __options_isset = YES;
}

- (BOOL) optionsIsSet {
  return __options_isset;
}

- (void) unsetOptions {
  [__options release];
  __options = nil;
  __options_isset = NO;
}

- (NSString *) ext {
  return [[__ext retain] autorelease];
}

- (void) setExt: (NSString *) ext {
  [ext retain];
  [__ext release];
  __ext = ext;
  __ext_isset = YES;
}

- (BOOL) extIsSet {
  return __ext_isset;
}

- (void) unsetExt {
  [__ext release];
  __ext = nil;
  __ext_isset = NO;
}

- (void) read: (id <TProtocol>) inProtocol
{
  NSString * fieldName;
  int fieldType;
  int fieldID;

  [inProtocol readStructBeginReturningName: NULL];
  while (true)
  {
    [inProtocol readFieldBeginReturningName: &fieldName type: &fieldType fieldID: &fieldID];
    if (fieldType == TType_STOP) { 
      break;
    }
    switch (fieldID)
    {
      case 1:
        if (fieldType == TType_STRING) {
          NSString * fieldValue = [inProtocol readString];
          [self setApi_id: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 2:
        if (fieldType == TType_STRING) {
          NSString * fieldValue = [inProtocol readString];
          [self setName_space: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 3:
        if (fieldType == TType_STRING) {
          NSString * fieldValue = [inProtocol readString];
          [self setUser_id: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 4:
        if (fieldType == TType_LIST) {
          int _size60;
          [inProtocol readListBeginReturningElementType: NULL size: &_size60];
          NSMutableArray * fieldValue = [[NSMutableArray alloc] initWithCapacity: _size60];
          int _i61;
          for (_i61 = 0; _i61 < _size60; ++_i61)
          {
            NSString * _elem62 = [inProtocol readString];
            [fieldValue addObject: _elem62];
          }
          [inProtocol readListEnd];
          [self setTags: fieldValue];
          [fieldValue release];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 5:
        if (fieldType == TType_STRING) {
          NSString * fieldValue = [inProtocol readString];
          [self setOptions: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 6:
        if (fieldType == TType_STRING) {
          NSString * fieldValue = [inProtocol readString];
          [self setExt: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      default:
        [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        break;
    }
    [inProtocol readFieldEnd];
  }
  [inProtocol readStructEnd];
}

- (void) write: (id <TProtocol>) outProtocol {
  [outProtocol writeStructBeginWithName: @"DatasetShowRequest"];
  if (__api_id_isset) {
    if (__api_id != nil) {
      [outProtocol writeFieldBeginWithName: @"api_id" type: TType_STRING fieldID: 1];
      [outProtocol writeString: __api_id];
      [outProtocol writeFieldEnd];
    }
  }
  if (__name_space_isset) {
    if (__name_space != nil) {
      [outProtocol writeFieldBeginWithName: @"name_space" type: TType_STRING fieldID: 2];
      [outProtocol writeString: __name_space];
      [outProtocol writeFieldEnd];
    }
  }
  if (__user_id_isset) {
    if (__user_id != nil) {
      [outProtocol writeFieldBeginWithName: @"user_id" type: TType_STRING fieldID: 3];
      [outProtocol writeString: __user_id];
      [outProtocol writeFieldEnd];
    }
  }
  if (__tags_isset) {
    if (__tags != nil) {
      [outProtocol writeFieldBeginWithName: @"tags" type: TType_LIST fieldID: 4];
      {
        [outProtocol writeListBeginWithElementType: TType_STRING size: [__tags count]];
        int i64;
        for (i64 = 0; i64 < [__tags count]; i64++)
        {
          [outProtocol writeString: [__tags objectAtIndex: i64]];
        }
        [outProtocol writeListEnd];
      }
      [outProtocol writeFieldEnd];
    }
  }
  if (__options_isset) {
    if (__options != nil) {
      [outProtocol writeFieldBeginWithName: @"options" type: TType_STRING fieldID: 5];
      [outProtocol writeString: __options];
      [outProtocol writeFieldEnd];
    }
  }
  if (__ext_isset) {
    if (__ext != nil) {
      [outProtocol writeFieldBeginWithName: @"ext" type: TType_STRING fieldID: 6];
      [outProtocol writeString: __ext];
      [outProtocol writeFieldEnd];
    }
  }
  [outProtocol writeFieldStop];
  [outProtocol writeStructEnd];
}

- (NSString *) description {
  NSMutableString * ms = [NSMutableString stringWithString: @"DatasetShowRequest("];
  [ms appendString: @"api_id:"];
  [ms appendFormat: @"\"%@\"", __api_id];
  [ms appendString: @",name_space:"];
  [ms appendFormat: @"\"%@\"", __name_space];
  [ms appendString: @",user_id:"];
  [ms appendFormat: @"\"%@\"", __user_id];
  [ms appendString: @",tags:"];
  [ms appendFormat: @"%@", __tags];
  [ms appendString: @",options:"];
  [ms appendFormat: @"\"%@\"", __options];
  [ms appendString: @",ext:"];
  [ms appendFormat: @"\"%@\"", __ext];
  [ms appendString: @")"];
  return [NSString stringWithString: ms];
}

@end

@implementation DatasetShowResponse

- (id) initWithRaw_image_urls: (NSArray *) raw_image_urls tags: (NSArray *) tags image_names: (NSArray *) image_names ext: (NSString *) ext
{
  self = [super init];
  __raw_image_urls = [raw_image_urls retain];
  __raw_image_urls_isset = YES;
  __tags = [tags retain];
  __tags_isset = YES;
  __image_names = [image_names retain];
  __image_names_isset = YES;
  __ext = [ext retain];
  __ext_isset = YES;
  return self;
}

- (id) initWithCoder: (NSCoder *) decoder
{
  self = [super init];
  if ([decoder containsValueForKey: @"raw_image_urls"])
  {
    __raw_image_urls = [[decoder decodeObjectForKey: @"raw_image_urls"] retain];
    __raw_image_urls_isset = YES;
  }
  if ([decoder containsValueForKey: @"tags"])
  {
    __tags = [[decoder decodeObjectForKey: @"tags"] retain];
    __tags_isset = YES;
  }
  if ([decoder containsValueForKey: @"image_names"])
  {
    __image_names = [[decoder decodeObjectForKey: @"image_names"] retain];
    __image_names_isset = YES;
  }
  if ([decoder containsValueForKey: @"ext"])
  {
    __ext = [[decoder decodeObjectForKey: @"ext"] retain];
    __ext_isset = YES;
  }
  return self;
}

- (void) encodeWithCoder: (NSCoder *) encoder
{
  if (__raw_image_urls_isset)
  {
    [encoder encodeObject: __raw_image_urls forKey: @"raw_image_urls"];
  }
  if (__tags_isset)
  {
    [encoder encodeObject: __tags forKey: @"tags"];
  }
  if (__image_names_isset)
  {
    [encoder encodeObject: __image_names forKey: @"image_names"];
  }
  if (__ext_isset)
  {
    [encoder encodeObject: __ext forKey: @"ext"];
  }
}

- (void) dealloc
{
  [__raw_image_urls release];
  [__tags release];
  [__image_names release];
  [__ext release];
  [super dealloc];
}

- (NSArray *) raw_image_urls {
  return [[__raw_image_urls retain] autorelease];
}

- (void) setRaw_image_urls: (NSArray *) raw_image_urls {
  [raw_image_urls retain];
  [__raw_image_urls release];
  __raw_image_urls = raw_image_urls;
  __raw_image_urls_isset = YES;
}

- (BOOL) raw_image_urlsIsSet {
  return __raw_image_urls_isset;
}

- (void) unsetRaw_image_urls {
  [__raw_image_urls release];
  __raw_image_urls = nil;
  __raw_image_urls_isset = NO;
}

- (NSArray *) tags {
  return [[__tags retain] autorelease];
}

- (void) setTags: (NSArray *) tags {
  [tags retain];
  [__tags release];
  __tags = tags;
  __tags_isset = YES;
}

- (BOOL) tagsIsSet {
  return __tags_isset;
}

- (void) unsetTags {
  [__tags release];
  __tags = nil;
  __tags_isset = NO;
}

- (NSArray *) image_names {
  return [[__image_names retain] autorelease];
}

- (void) setImage_names: (NSArray *) image_names {
  [image_names retain];
  [__image_names release];
  __image_names = image_names;
  __image_names_isset = YES;
}

- (BOOL) image_namesIsSet {
  return __image_names_isset;
}

- (void) unsetImage_names {
  [__image_names release];
  __image_names = nil;
  __image_names_isset = NO;
}

- (NSString *) ext {
  return [[__ext retain] autorelease];
}

- (void) setExt: (NSString *) ext {
  [ext retain];
  [__ext release];
  __ext = ext;
  __ext_isset = YES;
}

- (BOOL) extIsSet {
  return __ext_isset;
}

- (void) unsetExt {
  [__ext release];
  __ext = nil;
  __ext_isset = NO;
}

- (void) read: (id <TProtocol>) inProtocol
{
  NSString * fieldName;
  int fieldType;
  int fieldID;

  [inProtocol readStructBeginReturningName: NULL];
  while (true)
  {
    [inProtocol readFieldBeginReturningName: &fieldName type: &fieldType fieldID: &fieldID];
    if (fieldType == TType_STOP) { 
      break;
    }
    switch (fieldID)
    {
      case 1:
        if (fieldType == TType_LIST) {
          int _size65;
          [inProtocol readListBeginReturningElementType: NULL size: &_size65];
          NSMutableArray * fieldValue = [[NSMutableArray alloc] initWithCapacity: _size65];
          int _i66;
          for (_i66 = 0; _i66 < _size65; ++_i66)
          {
            NSString * _elem67 = [inProtocol readString];
            [fieldValue addObject: _elem67];
          }
          [inProtocol readListEnd];
          [self setRaw_image_urls: fieldValue];
          [fieldValue release];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 2:
        if (fieldType == TType_LIST) {
          int _size68;
          [inProtocol readListBeginReturningElementType: NULL size: &_size68];
          NSMutableArray * fieldValue = [[NSMutableArray alloc] initWithCapacity: _size68];
          int _i69;
          for (_i69 = 0; _i69 < _size68; ++_i69)
          {
            NSString * _elem70 = [inProtocol readString];
            [fieldValue addObject: _elem70];
          }
          [inProtocol readListEnd];
          [self setTags: fieldValue];
          [fieldValue release];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 3:
        if (fieldType == TType_LIST) {
          int _size71;
          [inProtocol readListBeginReturningElementType: NULL size: &_size71];
          NSMutableArray * fieldValue = [[NSMutableArray alloc] initWithCapacity: _size71];
          int _i72;
          for (_i72 = 0; _i72 < _size71; ++_i72)
          {
            int _size74;
            [inProtocol readListBeginReturningElementType: NULL size: &_size74];
            NSMutableArray * _elem73 = [[NSMutableArray alloc] initWithCapacity: _size74];
            int _i75;
            for (_i75 = 0; _i75 < _size74; ++_i75)
            {
              NSString * _elem76 = [inProtocol readString];
              [_elem73 addObject: _elem76];
            }
            [inProtocol readListEnd];
            [fieldValue addObject: _elem73];
            [_elem73 release];
          }
          [inProtocol readListEnd];
          [self setImage_names: fieldValue];
          [fieldValue release];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 4:
        if (fieldType == TType_STRING) {
          NSString * fieldValue = [inProtocol readString];
          [self setExt: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      default:
        [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        break;
    }
    [inProtocol readFieldEnd];
  }
  [inProtocol readStructEnd];
}

- (void) write: (id <TProtocol>) outProtocol {
  [outProtocol writeStructBeginWithName: @"DatasetShowResponse"];
  if (__raw_image_urls_isset) {
    if (__raw_image_urls != nil) {
      [outProtocol writeFieldBeginWithName: @"raw_image_urls" type: TType_LIST fieldID: 1];
      {
        [outProtocol writeListBeginWithElementType: TType_STRING size: [__raw_image_urls count]];
        int i78;
        for (i78 = 0; i78 < [__raw_image_urls count]; i78++)
        {
          [outProtocol writeString: [__raw_image_urls objectAtIndex: i78]];
        }
        [outProtocol writeListEnd];
      }
      [outProtocol writeFieldEnd];
    }
  }
  if (__tags_isset) {
    if (__tags != nil) {
      [outProtocol writeFieldBeginWithName: @"tags" type: TType_LIST fieldID: 2];
      {
        [outProtocol writeListBeginWithElementType: TType_STRING size: [__tags count]];
        int i80;
        for (i80 = 0; i80 < [__tags count]; i80++)
        {
          [outProtocol writeString: [__tags objectAtIndex: i80]];
        }
        [outProtocol writeListEnd];
      }
      [outProtocol writeFieldEnd];
    }
  }
  if (__image_names_isset) {
    if (__image_names != nil) {
      [outProtocol writeFieldBeginWithName: @"image_names" type: TType_LIST fieldID: 3];
      {
        [outProtocol writeListBeginWithElementType: TType_LIST size: [__image_names count]];
        int i82;
        for (i82 = 0; i82 < [__image_names count]; i82++)
        {
          {
            [outProtocol writeListBeginWithElementType: TType_STRING size: [[__image_names objectAtIndex: i82] count]];
            int i84;
            for (i84 = 0; i84 < [[__image_names objectAtIndex: i82] count]; i84++)
            {
              [outProtocol writeString: [[__image_names objectAtIndex: i82] objectAtIndex: i84]];
            }
            [outProtocol writeListEnd];
          }
        }
        [outProtocol writeListEnd];
      }
      [outProtocol writeFieldEnd];
    }
  }
  if (__ext_isset) {
    if (__ext != nil) {
      [outProtocol writeFieldBeginWithName: @"ext" type: TType_STRING fieldID: 4];
      [outProtocol writeString: __ext];
      [outProtocol writeFieldEnd];
    }
  }
  [outProtocol writeFieldStop];
  [outProtocol writeStructEnd];
}

- (NSString *) description {
  NSMutableString * ms = [NSMutableString stringWithString: @"DatasetShowResponse("];
  [ms appendString: @"raw_image_urls:"];
  [ms appendFormat: @"%@", __raw_image_urls];
  [ms appendString: @",tags:"];
  [ms appendFormat: @"%@", __tags];
  [ms appendString: @",image_names:"];
  [ms appendFormat: @"%@", __image_names];
  [ms appendString: @",ext:"];
  [ms appendFormat: @"\"%@\"", __ext];
  [ms appendString: @")"];
  return [NSString stringWithString: ms];
}

@end

@implementation DeletePhotoRequest

- (id) initWithApi_id: (NSString *) api_id name_space: (NSString *) name_space user_id: (NSString *) user_id tag: (NSString *) tag image_names: (NSArray *) image_names ext: (NSString *) ext
{
  self = [super init];
  __api_id = [api_id retain];
  __api_id_isset = YES;
  __name_space = [name_space retain];
  __name_space_isset = YES;
  __user_id = [user_id retain];
  __user_id_isset = YES;
  __tag = [tag retain];
  __tag_isset = YES;
  __image_names = [image_names retain];
  __image_names_isset = YES;
  __ext = [ext retain];
  __ext_isset = YES;
  return self;
}

- (id) initWithCoder: (NSCoder *) decoder
{
  self = [super init];
  if ([decoder containsValueForKey: @"api_id"])
  {
    __api_id = [[decoder decodeObjectForKey: @"api_id"] retain];
    __api_id_isset = YES;
  }
  if ([decoder containsValueForKey: @"name_space"])
  {
    __name_space = [[decoder decodeObjectForKey: @"name_space"] retain];
    __name_space_isset = YES;
  }
  if ([decoder containsValueForKey: @"user_id"])
  {
    __user_id = [[decoder decodeObjectForKey: @"user_id"] retain];
    __user_id_isset = YES;
  }
  if ([decoder containsValueForKey: @"tag"])
  {
    __tag = [[decoder decodeObjectForKey: @"tag"] retain];
    __tag_isset = YES;
  }
  if ([decoder containsValueForKey: @"image_names"])
  {
    __image_names = [[decoder decodeObjectForKey: @"image_names"] retain];
    __image_names_isset = YES;
  }
  if ([decoder containsValueForKey: @"ext"])
  {
    __ext = [[decoder decodeObjectForKey: @"ext"] retain];
    __ext_isset = YES;
  }
  return self;
}

- (void) encodeWithCoder: (NSCoder *) encoder
{
  if (__api_id_isset)
  {
    [encoder encodeObject: __api_id forKey: @"api_id"];
  }
  if (__name_space_isset)
  {
    [encoder encodeObject: __name_space forKey: @"name_space"];
  }
  if (__user_id_isset)
  {
    [encoder encodeObject: __user_id forKey: @"user_id"];
  }
  if (__tag_isset)
  {
    [encoder encodeObject: __tag forKey: @"tag"];
  }
  if (__image_names_isset)
  {
    [encoder encodeObject: __image_names forKey: @"image_names"];
  }
  if (__ext_isset)
  {
    [encoder encodeObject: __ext forKey: @"ext"];
  }
}

- (void) dealloc
{
  [__api_id release];
  [__name_space release];
  [__user_id release];
  [__tag release];
  [__image_names release];
  [__ext release];
  [super dealloc];
}

- (NSString *) api_id {
  return [[__api_id retain] autorelease];
}

- (void) setApi_id: (NSString *) api_id {
  [api_id retain];
  [__api_id release];
  __api_id = api_id;
  __api_id_isset = YES;
}

- (BOOL) api_idIsSet {
  return __api_id_isset;
}

- (void) unsetApi_id {
  [__api_id release];
  __api_id = nil;
  __api_id_isset = NO;
}

- (NSString *) name_space {
  return [[__name_space retain] autorelease];
}

- (void) setName_space: (NSString *) name_space {
  [name_space retain];
  [__name_space release];
  __name_space = name_space;
  __name_space_isset = YES;
}

- (BOOL) name_spaceIsSet {
  return __name_space_isset;
}

- (void) unsetName_space {
  [__name_space release];
  __name_space = nil;
  __name_space_isset = NO;
}

- (NSString *) user_id {
  return [[__user_id retain] autorelease];
}

- (void) setUser_id: (NSString *) user_id {
  [user_id retain];
  [__user_id release];
  __user_id = user_id;
  __user_id_isset = YES;
}

- (BOOL) user_idIsSet {
  return __user_id_isset;
}

- (void) unsetUser_id {
  [__user_id release];
  __user_id = nil;
  __user_id_isset = NO;
}

- (NSString *) tag {
  return [[__tag retain] autorelease];
}

- (void) setTag: (NSString *) tag {
  [tag retain];
  [__tag release];
  __tag = tag;
  __tag_isset = YES;
}

- (BOOL) tagIsSet {
  return __tag_isset;
}

- (void) unsetTag {
  [__tag release];
  __tag = nil;
  __tag_isset = NO;
}

- (NSArray *) image_names {
  return [[__image_names retain] autorelease];
}

- (void) setImage_names: (NSArray *) image_names {
  [image_names retain];
  [__image_names release];
  __image_names = image_names;
  __image_names_isset = YES;
}

- (BOOL) image_namesIsSet {
  return __image_names_isset;
}

- (void) unsetImage_names {
  [__image_names release];
  __image_names = nil;
  __image_names_isset = NO;
}

- (NSString *) ext {
  return [[__ext retain] autorelease];
}

- (void) setExt: (NSString *) ext {
  [ext retain];
  [__ext release];
  __ext = ext;
  __ext_isset = YES;
}

- (BOOL) extIsSet {
  return __ext_isset;
}

- (void) unsetExt {
  [__ext release];
  __ext = nil;
  __ext_isset = NO;
}

- (void) read: (id <TProtocol>) inProtocol
{
  NSString * fieldName;
  int fieldType;
  int fieldID;

  [inProtocol readStructBeginReturningName: NULL];
  while (true)
  {
    [inProtocol readFieldBeginReturningName: &fieldName type: &fieldType fieldID: &fieldID];
    if (fieldType == TType_STOP) { 
      break;
    }
    switch (fieldID)
    {
      case 1:
        if (fieldType == TType_STRING) {
          NSString * fieldValue = [inProtocol readString];
          [self setApi_id: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 2:
        if (fieldType == TType_STRING) {
          NSString * fieldValue = [inProtocol readString];
          [self setName_space: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 3:
        if (fieldType == TType_STRING) {
          NSString * fieldValue = [inProtocol readString];
          [self setUser_id: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 4:
        if (fieldType == TType_STRING) {
          NSString * fieldValue = [inProtocol readString];
          [self setTag: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 5:
        if (fieldType == TType_LIST) {
          int _size85;
          [inProtocol readListBeginReturningElementType: NULL size: &_size85];
          NSMutableArray * fieldValue = [[NSMutableArray alloc] initWithCapacity: _size85];
          int _i86;
          for (_i86 = 0; _i86 < _size85; ++_i86)
          {
            NSString * _elem87 = [inProtocol readString];
            [fieldValue addObject: _elem87];
          }
          [inProtocol readListEnd];
          [self setImage_names: fieldValue];
          [fieldValue release];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 6:
        if (fieldType == TType_STRING) {
          NSString * fieldValue = [inProtocol readString];
          [self setExt: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      default:
        [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        break;
    }
    [inProtocol readFieldEnd];
  }
  [inProtocol readStructEnd];
}

- (void) write: (id <TProtocol>) outProtocol {
  [outProtocol writeStructBeginWithName: @"DeletePhotoRequest"];
  if (__api_id_isset) {
    if (__api_id != nil) {
      [outProtocol writeFieldBeginWithName: @"api_id" type: TType_STRING fieldID: 1];
      [outProtocol writeString: __api_id];
      [outProtocol writeFieldEnd];
    }
  }
  if (__name_space_isset) {
    if (__name_space != nil) {
      [outProtocol writeFieldBeginWithName: @"name_space" type: TType_STRING fieldID: 2];
      [outProtocol writeString: __name_space];
      [outProtocol writeFieldEnd];
    }
  }
  if (__user_id_isset) {
    if (__user_id != nil) {
      [outProtocol writeFieldBeginWithName: @"user_id" type: TType_STRING fieldID: 3];
      [outProtocol writeString: __user_id];
      [outProtocol writeFieldEnd];
    }
  }
  if (__tag_isset) {
    if (__tag != nil) {
      [outProtocol writeFieldBeginWithName: @"tag" type: TType_STRING fieldID: 4];
      [outProtocol writeString: __tag];
      [outProtocol writeFieldEnd];
    }
  }
  if (__image_names_isset) {
    if (__image_names != nil) {
      [outProtocol writeFieldBeginWithName: @"image_names" type: TType_LIST fieldID: 5];
      {
        [outProtocol writeListBeginWithElementType: TType_STRING size: [__image_names count]];
        int i89;
        for (i89 = 0; i89 < [__image_names count]; i89++)
        {
          [outProtocol writeString: [__image_names objectAtIndex: i89]];
        }
        [outProtocol writeListEnd];
      }
      [outProtocol writeFieldEnd];
    }
  }
  if (__ext_isset) {
    if (__ext != nil) {
      [outProtocol writeFieldBeginWithName: @"ext" type: TType_STRING fieldID: 6];
      [outProtocol writeString: __ext];
      [outProtocol writeFieldEnd];
    }
  }
  [outProtocol writeFieldStop];
  [outProtocol writeStructEnd];
}

- (NSString *) description {
  NSMutableString * ms = [NSMutableString stringWithString: @"DeletePhotoRequest("];
  [ms appendString: @"api_id:"];
  [ms appendFormat: @"\"%@\"", __api_id];
  [ms appendString: @",name_space:"];
  [ms appendFormat: @"\"%@\"", __name_space];
  [ms appendString: @",user_id:"];
  [ms appendFormat: @"\"%@\"", __user_id];
  [ms appendString: @",tag:"];
  [ms appendFormat: @"\"%@\"", __tag];
  [ms appendString: @",image_names:"];
  [ms appendFormat: @"%@", __image_names];
  [ms appendString: @",ext:"];
  [ms appendFormat: @"\"%@\"", __ext];
  [ms appendString: @")"];
  return [NSString stringWithString: ms];
}

@end


@implementation ImageTrainConstants
+ (void) initialize {
}
@end

@interface AddPhoto_args : NSObject <NSCoding> {
  AddPhotoRequest * __req;

  BOOL __req_isset;
}

#if TARGET_OS_IPHONE || (MAC_OS_X_VERSION_MAX_ALLOWED >= MAC_OS_X_VERSION_10_5)
@property (nonatomic, retain, getter=req, setter=setReq:) AddPhotoRequest * req;
#endif

- (id) initWithReq: (AddPhotoRequest *) req;

- (void) read: (id <TProtocol>) inProtocol;
- (void) write: (id <TProtocol>) outProtocol;

- (AddPhotoRequest *) req;
- (void) setReq: (AddPhotoRequest *) req;
- (BOOL) reqIsSet;

@end

@implementation AddPhoto_args

- (id) initWithReq: (AddPhotoRequest *) req
{
  self = [super init];
  __req = [req retain];
  __req_isset = YES;
  return self;
}

- (id) initWithCoder: (NSCoder *) decoder
{
  self = [super init];
  if ([decoder containsValueForKey: @"req"])
  {
    __req = [[decoder decodeObjectForKey: @"req"] retain];
    __req_isset = YES;
  }
  return self;
}

- (void) encodeWithCoder: (NSCoder *) encoder
{
  if (__req_isset)
  {
    [encoder encodeObject: __req forKey: @"req"];
  }
}

- (void) dealloc
{
  [__req release];
  [super dealloc];
}

- (AddPhotoRequest *) req {
  return [[__req retain] autorelease];
}

- (void) setReq: (AddPhotoRequest *) req {
  [req retain];
  [__req release];
  __req = req;
  __req_isset = YES;
}

- (BOOL) reqIsSet {
  return __req_isset;
}

- (void) unsetReq {
  [__req release];
  __req = nil;
  __req_isset = NO;
}

- (void) read: (id <TProtocol>) inProtocol
{
  NSString * fieldName;
  int fieldType;
  int fieldID;

  [inProtocol readStructBeginReturningName: NULL];
  while (true)
  {
    [inProtocol readFieldBeginReturningName: &fieldName type: &fieldType fieldID: &fieldID];
    if (fieldType == TType_STOP) { 
      break;
    }
    switch (fieldID)
    {
      case 1:
        if (fieldType == TType_STRUCT) {
          AddPhotoRequest *fieldValue = [[AddPhotoRequest alloc] init];
          [fieldValue read: inProtocol];
          [self setReq: fieldValue];
          [fieldValue release];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      default:
        [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        break;
    }
    [inProtocol readFieldEnd];
  }
  [inProtocol readStructEnd];
}

- (void) write: (id <TProtocol>) outProtocol {
  [outProtocol writeStructBeginWithName: @"AddPhoto_args"];
  if (__req_isset) {
    if (__req != nil) {
      [outProtocol writeFieldBeginWithName: @"req" type: TType_STRUCT fieldID: 1];
      [__req write: outProtocol];
      [outProtocol writeFieldEnd];
    }
  }
  [outProtocol writeFieldStop];
  [outProtocol writeStructEnd];
}

- (NSString *) description {
  NSMutableString * ms = [NSMutableString stringWithString: @"AddPhoto_args("];
  [ms appendString: @"req:"];
  [ms appendFormat: @"%@", __req];
  [ms appendString: @")"];
  return [NSString stringWithString: ms];
}

@end

@interface Train_args : NSObject <NSCoding> {
  TrainRequest * __req;

  BOOL __req_isset;
}

#if TARGET_OS_IPHONE || (MAC_OS_X_VERSION_MAX_ALLOWED >= MAC_OS_X_VERSION_10_5)
@property (nonatomic, retain, getter=req, setter=setReq:) TrainRequest * req;
#endif

- (id) initWithReq: (TrainRequest *) req;

- (void) read: (id <TProtocol>) inProtocol;
- (void) write: (id <TProtocol>) outProtocol;

- (TrainRequest *) req;
- (void) setReq: (TrainRequest *) req;
- (BOOL) reqIsSet;

@end

@implementation Train_args

- (id) initWithReq: (TrainRequest *) req
{
  self = [super init];
  __req = [req retain];
  __req_isset = YES;
  return self;
}

- (id) initWithCoder: (NSCoder *) decoder
{
  self = [super init];
  if ([decoder containsValueForKey: @"req"])
  {
    __req = [[decoder decodeObjectForKey: @"req"] retain];
    __req_isset = YES;
  }
  return self;
}

- (void) encodeWithCoder: (NSCoder *) encoder
{
  if (__req_isset)
  {
    [encoder encodeObject: __req forKey: @"req"];
  }
}

- (void) dealloc
{
  [__req release];
  [super dealloc];
}

- (TrainRequest *) req {
  return [[__req retain] autorelease];
}

- (void) setReq: (TrainRequest *) req {
  [req retain];
  [__req release];
  __req = req;
  __req_isset = YES;
}

- (BOOL) reqIsSet {
  return __req_isset;
}

- (void) unsetReq {
  [__req release];
  __req = nil;
  __req_isset = NO;
}

- (void) read: (id <TProtocol>) inProtocol
{
  NSString * fieldName;
  int fieldType;
  int fieldID;

  [inProtocol readStructBeginReturningName: NULL];
  while (true)
  {
    [inProtocol readFieldBeginReturningName: &fieldName type: &fieldType fieldID: &fieldID];
    if (fieldType == TType_STOP) { 
      break;
    }
    switch (fieldID)
    {
      case 1:
        if (fieldType == TType_STRUCT) {
          TrainRequest *fieldValue = [[TrainRequest alloc] init];
          [fieldValue read: inProtocol];
          [self setReq: fieldValue];
          [fieldValue release];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      default:
        [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        break;
    }
    [inProtocol readFieldEnd];
  }
  [inProtocol readStructEnd];
}

- (void) write: (id <TProtocol>) outProtocol {
  [outProtocol writeStructBeginWithName: @"Train_args"];
  if (__req_isset) {
    if (__req != nil) {
      [outProtocol writeFieldBeginWithName: @"req" type: TType_STRUCT fieldID: 1];
      [__req write: outProtocol];
      [outProtocol writeFieldEnd];
    }
  }
  [outProtocol writeFieldStop];
  [outProtocol writeStructEnd];
}

- (NSString *) description {
  NSMutableString * ms = [NSMutableString stringWithString: @"Train_args("];
  [ms appendString: @"req:"];
  [ms appendFormat: @"%@", __req];
  [ms appendString: @")"];
  return [NSString stringWithString: ms];
}

@end

@interface DeletePhoto_args : NSObject <NSCoding> {
  DeletePhotoRequest * __req;

  BOOL __req_isset;
}

#if TARGET_OS_IPHONE || (MAC_OS_X_VERSION_MAX_ALLOWED >= MAC_OS_X_VERSION_10_5)
@property (nonatomic, retain, getter=req, setter=setReq:) DeletePhotoRequest * req;
#endif

- (id) initWithReq: (DeletePhotoRequest *) req;

- (void) read: (id <TProtocol>) inProtocol;
- (void) write: (id <TProtocol>) outProtocol;

- (DeletePhotoRequest *) req;
- (void) setReq: (DeletePhotoRequest *) req;
- (BOOL) reqIsSet;

@end

@implementation DeletePhoto_args

- (id) initWithReq: (DeletePhotoRequest *) req
{
  self = [super init];
  __req = [req retain];
  __req_isset = YES;
  return self;
}

- (id) initWithCoder: (NSCoder *) decoder
{
  self = [super init];
  if ([decoder containsValueForKey: @"req"])
  {
    __req = [[decoder decodeObjectForKey: @"req"] retain];
    __req_isset = YES;
  }
  return self;
}

- (void) encodeWithCoder: (NSCoder *) encoder
{
  if (__req_isset)
  {
    [encoder encodeObject: __req forKey: @"req"];
  }
}

- (void) dealloc
{
  [__req release];
  [super dealloc];
}

- (DeletePhotoRequest *) req {
  return [[__req retain] autorelease];
}

- (void) setReq: (DeletePhotoRequest *) req {
  [req retain];
  [__req release];
  __req = req;
  __req_isset = YES;
}

- (BOOL) reqIsSet {
  return __req_isset;
}

- (void) unsetReq {
  [__req release];
  __req = nil;
  __req_isset = NO;
}

- (void) read: (id <TProtocol>) inProtocol
{
  NSString * fieldName;
  int fieldType;
  int fieldID;

  [inProtocol readStructBeginReturningName: NULL];
  while (true)
  {
    [inProtocol readFieldBeginReturningName: &fieldName type: &fieldType fieldID: &fieldID];
    if (fieldType == TType_STOP) { 
      break;
    }
    switch (fieldID)
    {
      case 1:
        if (fieldType == TType_STRUCT) {
          DeletePhotoRequest *fieldValue = [[DeletePhotoRequest alloc] init];
          [fieldValue read: inProtocol];
          [self setReq: fieldValue];
          [fieldValue release];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      default:
        [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        break;
    }
    [inProtocol readFieldEnd];
  }
  [inProtocol readStructEnd];
}

- (void) write: (id <TProtocol>) outProtocol {
  [outProtocol writeStructBeginWithName: @"DeletePhoto_args"];
  if (__req_isset) {
    if (__req != nil) {
      [outProtocol writeFieldBeginWithName: @"req" type: TType_STRUCT fieldID: 1];
      [__req write: outProtocol];
      [outProtocol writeFieldEnd];
    }
  }
  [outProtocol writeFieldStop];
  [outProtocol writeStructEnd];
}

- (NSString *) description {
  NSMutableString * ms = [NSMutableString stringWithString: @"DeletePhoto_args("];
  [ms appendString: @"req:"];
  [ms appendFormat: @"%@", __req];
  [ms appendString: @")"];
  return [NSString stringWithString: ms];
}

@end

@interface Recognize_args : NSObject <NSCoding> {
  RecognizeRequest * __req;

  BOOL __req_isset;
}

#if TARGET_OS_IPHONE || (MAC_OS_X_VERSION_MAX_ALLOWED >= MAC_OS_X_VERSION_10_5)
@property (nonatomic, retain, getter=req, setter=setReq:) RecognizeRequest * req;
#endif

- (id) initWithReq: (RecognizeRequest *) req;

- (void) read: (id <TProtocol>) inProtocol;
- (void) write: (id <TProtocol>) outProtocol;

- (RecognizeRequest *) req;
- (void) setReq: (RecognizeRequest *) req;
- (BOOL) reqIsSet;

@end

@implementation Recognize_args

- (id) initWithReq: (RecognizeRequest *) req
{
  self = [super init];
  __req = [req retain];
  __req_isset = YES;
  return self;
}

- (id) initWithCoder: (NSCoder *) decoder
{
  self = [super init];
  if ([decoder containsValueForKey: @"req"])
  {
    __req = [[decoder decodeObjectForKey: @"req"] retain];
    __req_isset = YES;
  }
  return self;
}

- (void) encodeWithCoder: (NSCoder *) encoder
{
  if (__req_isset)
  {
    [encoder encodeObject: __req forKey: @"req"];
  }
}

- (void) dealloc
{
  [__req release];
  [super dealloc];
}

- (RecognizeRequest *) req {
  return [[__req retain] autorelease];
}

- (void) setReq: (RecognizeRequest *) req {
  [req retain];
  [__req release];
  __req = req;
  __req_isset = YES;
}

- (BOOL) reqIsSet {
  return __req_isset;
}

- (void) unsetReq {
  [__req release];
  __req = nil;
  __req_isset = NO;
}

- (void) read: (id <TProtocol>) inProtocol
{
  NSString * fieldName;
  int fieldType;
  int fieldID;

  [inProtocol readStructBeginReturningName: NULL];
  while (true)
  {
    [inProtocol readFieldBeginReturningName: &fieldName type: &fieldType fieldID: &fieldID];
    if (fieldType == TType_STOP) { 
      break;
    }
    switch (fieldID)
    {
      case 1:
        if (fieldType == TType_STRUCT) {
          RecognizeRequest *fieldValue = [[RecognizeRequest alloc] init];
          [fieldValue read: inProtocol];
          [self setReq: fieldValue];
          [fieldValue release];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      default:
        [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        break;
    }
    [inProtocol readFieldEnd];
  }
  [inProtocol readStructEnd];
}

- (void) write: (id <TProtocol>) outProtocol {
  [outProtocol writeStructBeginWithName: @"Recognize_args"];
  if (__req_isset) {
    if (__req != nil) {
      [outProtocol writeFieldBeginWithName: @"req" type: TType_STRUCT fieldID: 1];
      [__req write: outProtocol];
      [outProtocol writeFieldEnd];
    }
  }
  [outProtocol writeFieldStop];
  [outProtocol writeStructEnd];
}

- (NSString *) description {
  NSMutableString * ms = [NSMutableString stringWithString: @"Recognize_args("];
  [ms appendString: @"req:"];
  [ms appendFormat: @"%@", __req];
  [ms appendString: @")"];
  return [NSString stringWithString: ms];
}

@end

@interface Recognize_result : NSObject <NSCoding> {
  RecognizeResponse * __success;

  BOOL __success_isset;
}

#if TARGET_OS_IPHONE || (MAC_OS_X_VERSION_MAX_ALLOWED >= MAC_OS_X_VERSION_10_5)
@property (nonatomic, retain, getter=success, setter=setSuccess:) RecognizeResponse * success;
#endif

- (id) initWithSuccess: (RecognizeResponse *) success;

- (void) read: (id <TProtocol>) inProtocol;
- (void) write: (id <TProtocol>) outProtocol;

- (RecognizeResponse *) success;
- (void) setSuccess: (RecognizeResponse *) success;
- (BOOL) successIsSet;

@end

@implementation Recognize_result

- (id) initWithSuccess: (RecognizeResponse *) success
{
  self = [super init];
  __success = [success retain];
  __success_isset = YES;
  return self;
}

- (id) initWithCoder: (NSCoder *) decoder
{
  self = [super init];
  if ([decoder containsValueForKey: @"success"])
  {
    __success = [[decoder decodeObjectForKey: @"success"] retain];
    __success_isset = YES;
  }
  return self;
}

- (void) encodeWithCoder: (NSCoder *) encoder
{
  if (__success_isset)
  {
    [encoder encodeObject: __success forKey: @"success"];
  }
}

- (void) dealloc
{
  [__success release];
  [super dealloc];
}

- (RecognizeResponse *) success {
  return [[__success retain] autorelease];
}

- (void) setSuccess: (RecognizeResponse *) success {
  [success retain];
  [__success release];
  __success = success;
  __success_isset = YES;
}

- (BOOL) successIsSet {
  return __success_isset;
}

- (void) unsetSuccess {
  [__success release];
  __success = nil;
  __success_isset = NO;
}

- (void) read: (id <TProtocol>) inProtocol
{
  NSString * fieldName;
  int fieldType;
  int fieldID;

  [inProtocol readStructBeginReturningName: NULL];
  while (true)
  {
    [inProtocol readFieldBeginReturningName: &fieldName type: &fieldType fieldID: &fieldID];
    if (fieldType == TType_STOP) { 
      break;
    }
    switch (fieldID)
    {
      case 0:
        if (fieldType == TType_STRUCT) {
          RecognizeResponse *fieldValue = [[RecognizeResponse alloc] init];
          [fieldValue read: inProtocol];
          [self setSuccess: fieldValue];
          [fieldValue release];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      default:
        [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        break;
    }
    [inProtocol readFieldEnd];
  }
  [inProtocol readStructEnd];
}

- (void) write: (id <TProtocol>) outProtocol {
  [outProtocol writeStructBeginWithName: @"Recognize_result"];

  if (__success_isset) {
    if (__success != nil) {
      [outProtocol writeFieldBeginWithName: @"success" type: TType_STRUCT fieldID: 0];
      [__success write: outProtocol];
      [outProtocol writeFieldEnd];
    }
  }
  [outProtocol writeFieldStop];
  [outProtocol writeStructEnd];
}

- (NSString *) description {
  NSMutableString * ms = [NSMutableString stringWithString: @"Recognize_result("];
  [ms appendString: @"success:"];
  [ms appendFormat: @"%@", __success];
  [ms appendString: @")"];
  return [NSString stringWithString: ms];
}

@end

@interface DatasetShow_args : NSObject <NSCoding> {
  DatasetShowRequest * __req;

  BOOL __req_isset;
}

#if TARGET_OS_IPHONE || (MAC_OS_X_VERSION_MAX_ALLOWED >= MAC_OS_X_VERSION_10_5)
@property (nonatomic, retain, getter=req, setter=setReq:) DatasetShowRequest * req;
#endif

- (id) initWithReq: (DatasetShowRequest *) req;

- (void) read: (id <TProtocol>) inProtocol;
- (void) write: (id <TProtocol>) outProtocol;

- (DatasetShowRequest *) req;
- (void) setReq: (DatasetShowRequest *) req;
- (BOOL) reqIsSet;

@end

@implementation DatasetShow_args

- (id) initWithReq: (DatasetShowRequest *) req
{
  self = [super init];
  __req = [req retain];
  __req_isset = YES;
  return self;
}

- (id) initWithCoder: (NSCoder *) decoder
{
  self = [super init];
  if ([decoder containsValueForKey: @"req"])
  {
    __req = [[decoder decodeObjectForKey: @"req"] retain];
    __req_isset = YES;
  }
  return self;
}

- (void) encodeWithCoder: (NSCoder *) encoder
{
  if (__req_isset)
  {
    [encoder encodeObject: __req forKey: @"req"];
  }
}

- (void) dealloc
{
  [__req release];
  [super dealloc];
}

- (DatasetShowRequest *) req {
  return [[__req retain] autorelease];
}

- (void) setReq: (DatasetShowRequest *) req {
  [req retain];
  [__req release];
  __req = req;
  __req_isset = YES;
}

- (BOOL) reqIsSet {
  return __req_isset;
}

- (void) unsetReq {
  [__req release];
  __req = nil;
  __req_isset = NO;
}

- (void) read: (id <TProtocol>) inProtocol
{
  NSString * fieldName;
  int fieldType;
  int fieldID;

  [inProtocol readStructBeginReturningName: NULL];
  while (true)
  {
    [inProtocol readFieldBeginReturningName: &fieldName type: &fieldType fieldID: &fieldID];
    if (fieldType == TType_STOP) { 
      break;
    }
    switch (fieldID)
    {
      case 1:
        if (fieldType == TType_STRUCT) {
          DatasetShowRequest *fieldValue = [[DatasetShowRequest alloc] init];
          [fieldValue read: inProtocol];
          [self setReq: fieldValue];
          [fieldValue release];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      default:
        [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        break;
    }
    [inProtocol readFieldEnd];
  }
  [inProtocol readStructEnd];
}

- (void) write: (id <TProtocol>) outProtocol {
  [outProtocol writeStructBeginWithName: @"DatasetShow_args"];
  if (__req_isset) {
    if (__req != nil) {
      [outProtocol writeFieldBeginWithName: @"req" type: TType_STRUCT fieldID: 1];
      [__req write: outProtocol];
      [outProtocol writeFieldEnd];
    }
  }
  [outProtocol writeFieldStop];
  [outProtocol writeStructEnd];
}

- (NSString *) description {
  NSMutableString * ms = [NSMutableString stringWithString: @"DatasetShow_args("];
  [ms appendString: @"req:"];
  [ms appendFormat: @"%@", __req];
  [ms appendString: @")"];
  return [NSString stringWithString: ms];
}

@end

@interface DatasetShow_result : NSObject <NSCoding> {
  DatasetShowResponse * __success;

  BOOL __success_isset;
}

#if TARGET_OS_IPHONE || (MAC_OS_X_VERSION_MAX_ALLOWED >= MAC_OS_X_VERSION_10_5)
@property (nonatomic, retain, getter=success, setter=setSuccess:) DatasetShowResponse * success;
#endif

- (id) initWithSuccess: (DatasetShowResponse *) success;

- (void) read: (id <TProtocol>) inProtocol;
- (void) write: (id <TProtocol>) outProtocol;

- (DatasetShowResponse *) success;
- (void) setSuccess: (DatasetShowResponse *) success;
- (BOOL) successIsSet;

@end

@implementation DatasetShow_result

- (id) initWithSuccess: (DatasetShowResponse *) success
{
  self = [super init];
  __success = [success retain];
  __success_isset = YES;
  return self;
}

- (id) initWithCoder: (NSCoder *) decoder
{
  self = [super init];
  if ([decoder containsValueForKey: @"success"])
  {
    __success = [[decoder decodeObjectForKey: @"success"] retain];
    __success_isset = YES;
  }
  return self;
}

- (void) encodeWithCoder: (NSCoder *) encoder
{
  if (__success_isset)
  {
    [encoder encodeObject: __success forKey: @"success"];
  }
}

- (void) dealloc
{
  [__success release];
  [super dealloc];
}

- (DatasetShowResponse *) success {
  return [[__success retain] autorelease];
}

- (void) setSuccess: (DatasetShowResponse *) success {
  [success retain];
  [__success release];
  __success = success;
  __success_isset = YES;
}

- (BOOL) successIsSet {
  return __success_isset;
}

- (void) unsetSuccess {
  [__success release];
  __success = nil;
  __success_isset = NO;
}

- (void) read: (id <TProtocol>) inProtocol
{
  NSString * fieldName;
  int fieldType;
  int fieldID;

  [inProtocol readStructBeginReturningName: NULL];
  while (true)
  {
    [inProtocol readFieldBeginReturningName: &fieldName type: &fieldType fieldID: &fieldID];
    if (fieldType == TType_STOP) { 
      break;
    }
    switch (fieldID)
    {
      case 0:
        if (fieldType == TType_STRUCT) {
          DatasetShowResponse *fieldValue = [[DatasetShowResponse alloc] init];
          [fieldValue read: inProtocol];
          [self setSuccess: fieldValue];
          [fieldValue release];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      default:
        [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        break;
    }
    [inProtocol readFieldEnd];
  }
  [inProtocol readStructEnd];
}

- (void) write: (id <TProtocol>) outProtocol {
  [outProtocol writeStructBeginWithName: @"DatasetShow_result"];

  if (__success_isset) {
    if (__success != nil) {
      [outProtocol writeFieldBeginWithName: @"success" type: TType_STRUCT fieldID: 0];
      [__success write: outProtocol];
      [outProtocol writeFieldEnd];
    }
  }
  [outProtocol writeFieldStop];
  [outProtocol writeStructEnd];
}

- (NSString *) description {
  NSMutableString * ms = [NSMutableString stringWithString: @"DatasetShow_result("];
  [ms appendString: @"success:"];
  [ms appendFormat: @"%@", __success];
  [ms appendString: @")"];
  return [NSString stringWithString: ms];
}

@end

@implementation TrainingServerClient
- (id) initWithProtocol: (id <TProtocol>) protocol
{
  return [self initWithInProtocol: protocol outProtocol: protocol];
}

- (id) initWithInProtocol: (id <TProtocol>) anInProtocol outProtocol: (id <TProtocol>) anOutProtocol
{
  [super init];
  inProtocol = [anInProtocol retain];
  outProtocol = [anOutProtocol retain];
  return self;
}

- (void) dealloc
{
  [inProtocol release];
  [outProtocol release];
  [super dealloc];
}

- (void) send_AddPhoto: (AddPhotoRequest *) req
{
  [outProtocol writeMessageBeginWithName: @"AddPhoto" type: TMessageType_CALL sequenceID: 0];
  [outProtocol writeStructBeginWithName: @"AddPhoto_args"];
  if (req != nil)  {
    [outProtocol writeFieldBeginWithName: @"req" type: TType_STRUCT fieldID: 1];
    [req write: outProtocol];
    [outProtocol writeFieldEnd];
  }
  [outProtocol writeFieldStop];
  [outProtocol writeStructEnd];
  [outProtocol writeMessageEnd];
  [[outProtocol transport] flush];
}

- (void) AddPhoto: (AddPhotoRequest *) req
{
  [self send_AddPhoto: req];
}

- (void) send_Train: (TrainRequest *) req
{
  [outProtocol writeMessageBeginWithName: @"Train" type: TMessageType_CALL sequenceID: 0];
  [outProtocol writeStructBeginWithName: @"Train_args"];
  if (req != nil)  {
    [outProtocol writeFieldBeginWithName: @"req" type: TType_STRUCT fieldID: 1];
    [req write: outProtocol];
    [outProtocol writeFieldEnd];
  }
  [outProtocol writeFieldStop];
  [outProtocol writeStructEnd];
  [outProtocol writeMessageEnd];
  [[outProtocol transport] flush];
}

- (void) Train: (TrainRequest *) req
{
  [self send_Train: req];
}

- (void) send_DeletePhoto: (DeletePhotoRequest *) req
{
  [outProtocol writeMessageBeginWithName: @"DeletePhoto" type: TMessageType_CALL sequenceID: 0];
  [outProtocol writeStructBeginWithName: @"DeletePhoto_args"];
  if (req != nil)  {
    [outProtocol writeFieldBeginWithName: @"req" type: TType_STRUCT fieldID: 1];
    [req write: outProtocol];
    [outProtocol writeFieldEnd];
  }
  [outProtocol writeFieldStop];
  [outProtocol writeStructEnd];
  [outProtocol writeMessageEnd];
  [[outProtocol transport] flush];
}

- (void) DeletePhoto: (DeletePhotoRequest *) req
{
  [self send_DeletePhoto: req];
}

- (void) send_Recognize: (RecognizeRequest *) req
{
  [outProtocol writeMessageBeginWithName: @"Recognize" type: TMessageType_CALL sequenceID: 0];
  [outProtocol writeStructBeginWithName: @"Recognize_args"];
  if (req != nil)  {
    [outProtocol writeFieldBeginWithName: @"req" type: TType_STRUCT fieldID: 1];
    [req write: outProtocol];
    [outProtocol writeFieldEnd];
  }
  [outProtocol writeFieldStop];
  [outProtocol writeStructEnd];
  [outProtocol writeMessageEnd];
  [[outProtocol transport] flush];
}

- (RecognizeResponse *) recv_Recognize
{
  int msgType = 0;
  [inProtocol readMessageBeginReturningName: nil type: &msgType sequenceID: NULL];
  if (msgType == TMessageType_EXCEPTION) {
    TApplicationException * x = [TApplicationException read: inProtocol];
    [inProtocol readMessageEnd];
    @throw x;
  }
  Recognize_result * result = [[[Recognize_result alloc] init] autorelease];
  [result read: inProtocol];
  [inProtocol readMessageEnd];
  if ([result successIsSet]) {
    return [result success];
  }
  @throw [TApplicationException exceptionWithType: TApplicationException_MISSING_RESULT
                                           reason: @"Recognize failed: unknown result"];
}

- (RecognizeResponse *) Recognize: (RecognizeRequest *) req
{
  [self send_Recognize: req];
  return [self recv_Recognize];
}

- (void) send_DatasetShow: (DatasetShowRequest *) req
{
  [outProtocol writeMessageBeginWithName: @"DatasetShow" type: TMessageType_CALL sequenceID: 0];
  [outProtocol writeStructBeginWithName: @"DatasetShow_args"];
  if (req != nil)  {
    [outProtocol writeFieldBeginWithName: @"req" type: TType_STRUCT fieldID: 1];
    [req write: outProtocol];
    [outProtocol writeFieldEnd];
  }
  [outProtocol writeFieldStop];
  [outProtocol writeStructEnd];
  [outProtocol writeMessageEnd];
  [[outProtocol transport] flush];
}

- (DatasetShowResponse *) recv_DatasetShow
{
  int msgType = 0;
  [inProtocol readMessageBeginReturningName: nil type: &msgType sequenceID: NULL];
  if (msgType == TMessageType_EXCEPTION) {
    TApplicationException * x = [TApplicationException read: inProtocol];
    [inProtocol readMessageEnd];
    @throw x;
  }
  DatasetShow_result * result = [[[DatasetShow_result alloc] init] autorelease];
  [result read: inProtocol];
  [inProtocol readMessageEnd];
  if ([result successIsSet]) {
    return [result success];
  }
  @throw [TApplicationException exceptionWithType: TApplicationException_MISSING_RESULT
                                           reason: @"DatasetShow failed: unknown result"];
}

- (DatasetShowResponse *) DatasetShow: (DatasetShowRequest *) req
{
  [self send_DatasetShow: req];
  return [self recv_DatasetShow];
}

@end

@implementation TrainingServerProcessor

- (id) initWithTrainingServer: (id <TrainingServer>) service
{
  self = [super init];
  if (!self) {
    return nil;
  }
  mService = [service retain];
  mMethodMap = [[NSMutableDictionary dictionary] retain];
  {
    SEL s = @selector(process_AddPhoto_withSequenceID:inProtocol:outProtocol:);
    NSMethodSignature * sig = [self methodSignatureForSelector: s];
    NSInvocation * invocation = [NSInvocation invocationWithMethodSignature: sig];
    [invocation setSelector: s];
    [invocation retainArguments];
    [mMethodMap setValue: invocation forKey: @"AddPhoto"];
  }
  {
    SEL s = @selector(process_Train_withSequenceID:inProtocol:outProtocol:);
    NSMethodSignature * sig = [self methodSignatureForSelector: s];
    NSInvocation * invocation = [NSInvocation invocationWithMethodSignature: sig];
    [invocation setSelector: s];
    [invocation retainArguments];
    [mMethodMap setValue: invocation forKey: @"Train"];
  }
  {
    SEL s = @selector(process_DeletePhoto_withSequenceID:inProtocol:outProtocol:);
    NSMethodSignature * sig = [self methodSignatureForSelector: s];
    NSInvocation * invocation = [NSInvocation invocationWithMethodSignature: sig];
    [invocation setSelector: s];
    [invocation retainArguments];
    [mMethodMap setValue: invocation forKey: @"DeletePhoto"];
  }
  {
    SEL s = @selector(process_Recognize_withSequenceID:inProtocol:outProtocol:);
    NSMethodSignature * sig = [self methodSignatureForSelector: s];
    NSInvocation * invocation = [NSInvocation invocationWithMethodSignature: sig];
    [invocation setSelector: s];
    [invocation retainArguments];
    [mMethodMap setValue: invocation forKey: @"Recognize"];
  }
  {
    SEL s = @selector(process_DatasetShow_withSequenceID:inProtocol:outProtocol:);
    NSMethodSignature * sig = [self methodSignatureForSelector: s];
    NSInvocation * invocation = [NSInvocation invocationWithMethodSignature: sig];
    [invocation setSelector: s];
    [invocation retainArguments];
    [mMethodMap setValue: invocation forKey: @"DatasetShow"];
  }
  return self;
}

- (id<TrainingServer>) service
{
  return [[mService retain] autorelease];
}

- (BOOL) processOnInputProtocol: (id <TProtocol>) inProtocol
                 outputProtocol: (id <TProtocol>) outProtocol
{
  NSString * messageName;
  int messageType;
  int seqID;
  [inProtocol readMessageBeginReturningName: &messageName
                                       type: &messageType
                                 sequenceID: &seqID];
  NSInvocation * invocation = [mMethodMap valueForKey: messageName];
  if (invocation == nil) {
    [TProtocolUtil skipType: TType_STRUCT onProtocol: inProtocol];
    [inProtocol readMessageEnd];
    TApplicationException * x = [TApplicationException exceptionWithType: TApplicationException_UNKNOWN_METHOD reason: [NSString stringWithFormat: @"Invalid method name: '%@'", messageName]];
    [outProtocol writeMessageBeginWithName: messageName
                                      type: TMessageType_EXCEPTION
                                sequenceID: seqID];
    [x write: outProtocol];
    [outProtocol writeMessageEnd];
    [[outProtocol transport] flush];
    return YES;
  }
  // NSInvocation does not conform to NSCopying protocol
  NSInvocation * i = [NSInvocation invocationWithMethodSignature: [invocation methodSignature]];
  [i setSelector: [invocation selector]];
  [i setArgument: &seqID atIndex: 2];
  [i setArgument: &inProtocol atIndex: 3];
  [i setArgument: &outProtocol atIndex: 4];
  [i setTarget: self];
  [i invoke];
  return YES;
}

- (void) process_Recognize_withSequenceID: (int32_t) seqID inProtocol: (id<TProtocol>) inProtocol outProtocol: (id<TProtocol>) outProtocol
{
  Recognize_args * args = [[Recognize_args alloc] init];
  [args read: inProtocol];
  [inProtocol readMessageEnd];
  Recognize_result * result = [[Recognize_result alloc] init];
  [result setSuccess: [mService Recognize: [args req]]];
  [outProtocol writeMessageBeginWithName: @"Recognize"
                                    type: TMessageType_REPLY
                              sequenceID: seqID];
  [result write: outProtocol];
  [outProtocol writeMessageEnd];
  [[outProtocol transport] flush];
  [result release];
  [args release];
}

- (void) process_DatasetShow_withSequenceID: (int32_t) seqID inProtocol: (id<TProtocol>) inProtocol outProtocol: (id<TProtocol>) outProtocol
{
  DatasetShow_args * args = [[DatasetShow_args alloc] init];
  [args read: inProtocol];
  [inProtocol readMessageEnd];
  DatasetShow_result * result = [[DatasetShow_result alloc] init];
  [result setSuccess: [mService DatasetShow: [args req]]];
  [outProtocol writeMessageBeginWithName: @"DatasetShow"
                                    type: TMessageType_REPLY
                              sequenceID: seqID];
  [result write: outProtocol];
  [outProtocol writeMessageEnd];
  [[outProtocol transport] flush];
  [result release];
  [args release];
}

- (void) dealloc
{
  [mService release];
  [mMethodMap release];
  [super dealloc];
}

@end

