/**
 * Autogenerated by Thrift Compiler (0.8.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */

#import <Foundation/Foundation.h>

#import "TProtocol.h"
#import "TApplicationException.h"
#import "TProtocolUtil.h"
#import "TProcessor.h"


#import "PeterRequest.h"

@implementation FaceRecognizeRequest

- (id) initWithApi_id: (NSString *) api_id name_space: (NSString *) name_space user_id: (NSString *) user_id tags: (NSArray *) tags feature_type: (NSString *) feature_type mode: (NSString *) mode ext: (NSString *) ext
{
  self = [super init];
  __api_id = [api_id retain];
  __api_id_isset = YES;
  __name_space = [name_space retain];
  __name_space_isset = YES;
  __user_id = [user_id retain];
  __user_id_isset = YES;
  __tags = [tags retain];
  __tags_isset = YES;
  __feature_type = [feature_type retain];
  __feature_type_isset = YES;
  __mode = [mode retain];
  __mode_isset = YES;
  __ext = [ext retain];
  __ext_isset = YES;
  return self;
}

- (id) initWithCoder: (NSCoder *) decoder
{
  self = [super init];
  if ([decoder containsValueForKey: @"api_id"])
  {
    __api_id = [[decoder decodeObjectForKey: @"api_id"] retain];
    __api_id_isset = YES;
  }
  if ([decoder containsValueForKey: @"name_space"])
  {
    __name_space = [[decoder decodeObjectForKey: @"name_space"] retain];
    __name_space_isset = YES;
  }
  if ([decoder containsValueForKey: @"user_id"])
  {
    __user_id = [[decoder decodeObjectForKey: @"user_id"] retain];
    __user_id_isset = YES;
  }
  if ([decoder containsValueForKey: @"tags"])
  {
    __tags = [[decoder decodeObjectForKey: @"tags"] retain];
    __tags_isset = YES;
  }
  if ([decoder containsValueForKey: @"feature_type"])
  {
    __feature_type = [[decoder decodeObjectForKey: @"feature_type"] retain];
    __feature_type_isset = YES;
  }
  if ([decoder containsValueForKey: @"mode"])
  {
    __mode = [[decoder decodeObjectForKey: @"mode"] retain];
    __mode_isset = YES;
  }
  if ([decoder containsValueForKey: @"ext"])
  {
    __ext = [[decoder decodeObjectForKey: @"ext"] retain];
    __ext_isset = YES;
  }
  return self;
}

- (void) encodeWithCoder: (NSCoder *) encoder
{
  if (__api_id_isset)
  {
    [encoder encodeObject: __api_id forKey: @"api_id"];
  }
  if (__name_space_isset)
  {
    [encoder encodeObject: __name_space forKey: @"name_space"];
  }
  if (__user_id_isset)
  {
    [encoder encodeObject: __user_id forKey: @"user_id"];
  }
  if (__tags_isset)
  {
    [encoder encodeObject: __tags forKey: @"tags"];
  }
  if (__feature_type_isset)
  {
    [encoder encodeObject: __feature_type forKey: @"feature_type"];
  }
  if (__mode_isset)
  {
    [encoder encodeObject: __mode forKey: @"mode"];
  }
  if (__ext_isset)
  {
    [encoder encodeObject: __ext forKey: @"ext"];
  }
}

- (void) dealloc
{
  [__api_id release];
  [__name_space release];
  [__user_id release];
  [__tags release];
  [__feature_type release];
  [__mode release];
  [__ext release];
  [super dealloc];
}

- (NSString *) api_id {
  return [[__api_id retain] autorelease];
}

- (void) setApi_id: (NSString *) api_id {
  [api_id retain];
  [__api_id release];
  __api_id = api_id;
  __api_id_isset = YES;
}

- (BOOL) api_idIsSet {
  return __api_id_isset;
}

- (void) unsetApi_id {
  [__api_id release];
  __api_id = nil;
  __api_id_isset = NO;
}

- (NSString *) name_space {
  return [[__name_space retain] autorelease];
}

- (void) setName_space: (NSString *) name_space {
  [name_space retain];
  [__name_space release];
  __name_space = name_space;
  __name_space_isset = YES;
}

- (BOOL) name_spaceIsSet {
  return __name_space_isset;
}

- (void) unsetName_space {
  [__name_space release];
  __name_space = nil;
  __name_space_isset = NO;
}

- (NSString *) user_id {
  return [[__user_id retain] autorelease];
}

- (void) setUser_id: (NSString *) user_id {
  [user_id retain];
  [__user_id release];
  __user_id = user_id;
  __user_id_isset = YES;
}

- (BOOL) user_idIsSet {
  return __user_id_isset;
}

- (void) unsetUser_id {
  [__user_id release];
  __user_id = nil;
  __user_id_isset = NO;
}

- (NSArray *) tags {
  return [[__tags retain] autorelease];
}

- (void) setTags: (NSArray *) tags {
  [tags retain];
  [__tags release];
  __tags = tags;
  __tags_isset = YES;
}

- (BOOL) tagsIsSet {
  return __tags_isset;
}

- (void) unsetTags {
  [__tags release];
  __tags = nil;
  __tags_isset = NO;
}

- (NSString *) feature_type {
  return [[__feature_type retain] autorelease];
}

- (void) setFeature_type: (NSString *) feature_type {
  [feature_type retain];
  [__feature_type release];
  __feature_type = feature_type;
  __feature_type_isset = YES;
}

- (BOOL) feature_typeIsSet {
  return __feature_type_isset;
}

- (void) unsetFeature_type {
  [__feature_type release];
  __feature_type = nil;
  __feature_type_isset = NO;
}

- (NSString *) mode {
  return [[__mode retain] autorelease];
}

- (void) setMode: (NSString *) mode {
  [mode retain];
  [__mode release];
  __mode = mode;
  __mode_isset = YES;
}

- (BOOL) modeIsSet {
  return __mode_isset;
}

- (void) unsetMode {
  [__mode release];
  __mode = nil;
  __mode_isset = NO;
}

- (NSString *) ext {
  return [[__ext retain] autorelease];
}

- (void) setExt: (NSString *) ext {
  [ext retain];
  [__ext release];
  __ext = ext;
  __ext_isset = YES;
}

- (BOOL) extIsSet {
  return __ext_isset;
}

- (void) unsetExt {
  [__ext release];
  __ext = nil;
  __ext_isset = NO;
}

- (void) read: (id <TProtocol>) inProtocol
{
  NSString * fieldName;
  int fieldType;
  int fieldID;

  [inProtocol readStructBeginReturningName: NULL];
  while (true)
  {
    [inProtocol readFieldBeginReturningName: &fieldName type: &fieldType fieldID: &fieldID];
    if (fieldType == TType_STOP) { 
      break;
    }
    switch (fieldID)
    {
      case 1:
        if (fieldType == TType_STRING) {
          NSString * fieldValue = [inProtocol readString];
          [self setApi_id: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 2:
        if (fieldType == TType_STRING) {
          NSString * fieldValue = [inProtocol readString];
          [self setName_space: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 3:
        if (fieldType == TType_STRING) {
          NSString * fieldValue = [inProtocol readString];
          [self setUser_id: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 4:
        if (fieldType == TType_LIST) {
          int _size0;
          [inProtocol readListBeginReturningElementType: NULL size: &_size0];
          NSMutableArray * fieldValue = [[NSMutableArray alloc] initWithCapacity: _size0];
          int _i1;
          for (_i1 = 0; _i1 < _size0; ++_i1)
          {
            NSString * _elem2 = [inProtocol readString];
            [fieldValue addObject: _elem2];
          }
          [inProtocol readListEnd];
          [self setTags: fieldValue];
          [fieldValue release];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 5:
        if (fieldType == TType_STRING) {
          NSString * fieldValue = [inProtocol readString];
          [self setFeature_type: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 6:
        if (fieldType == TType_STRING) {
          NSString * fieldValue = [inProtocol readString];
          [self setMode: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 7:
        if (fieldType == TType_STRING) {
          NSString * fieldValue = [inProtocol readString];
          [self setExt: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      default:
        [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        break;
    }
    [inProtocol readFieldEnd];
  }
  [inProtocol readStructEnd];
}

- (void) write: (id <TProtocol>) outProtocol {
  [outProtocol writeStructBeginWithName: @"FaceRecognizeRequest"];
  if (__api_id_isset) {
    if (__api_id != nil) {
      [outProtocol writeFieldBeginWithName: @"api_id" type: TType_STRING fieldID: 1];
      [outProtocol writeString: __api_id];
      [outProtocol writeFieldEnd];
    }
  }
  if (__name_space_isset) {
    if (__name_space != nil) {
      [outProtocol writeFieldBeginWithName: @"name_space" type: TType_STRING fieldID: 2];
      [outProtocol writeString: __name_space];
      [outProtocol writeFieldEnd];
    }
  }
  if (__user_id_isset) {
    if (__user_id != nil) {
      [outProtocol writeFieldBeginWithName: @"user_id" type: TType_STRING fieldID: 3];
      [outProtocol writeString: __user_id];
      [outProtocol writeFieldEnd];
    }
  }
  if (__tags_isset) {
    if (__tags != nil) {
      [outProtocol writeFieldBeginWithName: @"tags" type: TType_LIST fieldID: 4];
      {
        [outProtocol writeListBeginWithElementType: TType_STRING size: [__tags count]];
        int i4;
        for (i4 = 0; i4 < [__tags count]; i4++)
        {
          [outProtocol writeString: [__tags objectAtIndex: i4]];
        }
        [outProtocol writeListEnd];
      }
      [outProtocol writeFieldEnd];
    }
  }
  if (__feature_type_isset) {
    if (__feature_type != nil) {
      [outProtocol writeFieldBeginWithName: @"feature_type" type: TType_STRING fieldID: 5];
      [outProtocol writeString: __feature_type];
      [outProtocol writeFieldEnd];
    }
  }
  if (__mode_isset) {
    if (__mode != nil) {
      [outProtocol writeFieldBeginWithName: @"mode" type: TType_STRING fieldID: 6];
      [outProtocol writeString: __mode];
      [outProtocol writeFieldEnd];
    }
  }
  if (__ext_isset) {
    if (__ext != nil) {
      [outProtocol writeFieldBeginWithName: @"ext" type: TType_STRING fieldID: 7];
      [outProtocol writeString: __ext];
      [outProtocol writeFieldEnd];
    }
  }
  [outProtocol writeFieldStop];
  [outProtocol writeStructEnd];
}

- (NSString *) description {
  NSMutableString * ms = [NSMutableString stringWithString: @"FaceRecognizeRequest("];
  [ms appendString: @"api_id:"];
  [ms appendFormat: @"\"%@\"", __api_id];
  [ms appendString: @",name_space:"];
  [ms appendFormat: @"\"%@\"", __name_space];
  [ms appendString: @",user_id:"];
  [ms appendFormat: @"\"%@\"", __user_id];
  [ms appendString: @",tags:"];
  [ms appendFormat: @"%@", __tags];
  [ms appendString: @",feature_type:"];
  [ms appendFormat: @"\"%@\"", __feature_type];
  [ms appendString: @",mode:"];
  [ms appendFormat: @"\"%@\"", __mode];
  [ms appendString: @",ext:"];
  [ms appendFormat: @"\"%@\"", __ext];
  [ms appendString: @")"];
  return [NSString stringWithString: ms];
}

@end

@implementation VisualRequest

- (id) initWithRawimage: (NSString *) rawimage jobs: (NSArray *) jobs time_sent: (int32_t) time_sent url: (NSString *) url format: (NSString *) format height: (int32_t) height width: (int32_t) width user_ID: (NSString *) user_ID ext: (NSString *) ext recognize_request: (FaceRecognizeRequest *) recognize_request
{
  self = [super init];
  __rawimage = [rawimage retain];
  __rawimage_isset = YES;
  __jobs = [jobs retain];
  __jobs_isset = YES;
  __time_sent = time_sent;
  __time_sent_isset = YES;
  __url = [url retain];
  __url_isset = YES;
  __format = [format retain];
  __format_isset = YES;
  __height = height;
  __height_isset = YES;
  __width = width;
  __width_isset = YES;
  __user_ID = [user_ID retain];
  __user_ID_isset = YES;
  __ext = [ext retain];
  __ext_isset = YES;
  __recognize_request = [recognize_request retain];
  __recognize_request_isset = YES;
  return self;
}

- (id) initWithCoder: (NSCoder *) decoder
{
  self = [super init];
  if ([decoder containsValueForKey: @"rawimage"])
  {
    __rawimage = [[decoder decodeObjectForKey: @"rawimage"] retain];
    __rawimage_isset = YES;
  }
  if ([decoder containsValueForKey: @"jobs"])
  {
    __jobs = [[decoder decodeObjectForKey: @"jobs"] retain];
    __jobs_isset = YES;
  }
  if ([decoder containsValueForKey: @"time_sent"])
  {
    __time_sent = [decoder decodeInt32ForKey: @"time_sent"];
    __time_sent_isset = YES;
  }
  if ([decoder containsValueForKey: @"url"])
  {
    __url = [[decoder decodeObjectForKey: @"url"] retain];
    __url_isset = YES;
  }
  if ([decoder containsValueForKey: @"format"])
  {
    __format = [[decoder decodeObjectForKey: @"format"] retain];
    __format_isset = YES;
  }
  if ([decoder containsValueForKey: @"height"])
  {
    __height = [decoder decodeInt32ForKey: @"height"];
    __height_isset = YES;
  }
  if ([decoder containsValueForKey: @"width"])
  {
    __width = [decoder decodeInt32ForKey: @"width"];
    __width_isset = YES;
  }
  if ([decoder containsValueForKey: @"user_ID"])
  {
    __user_ID = [[decoder decodeObjectForKey: @"user_ID"] retain];
    __user_ID_isset = YES;
  }
  if ([decoder containsValueForKey: @"ext"])
  {
    __ext = [[decoder decodeObjectForKey: @"ext"] retain];
    __ext_isset = YES;
  }
  if ([decoder containsValueForKey: @"recognize_request"])
  {
    __recognize_request = [[decoder decodeObjectForKey: @"recognize_request"] retain];
    __recognize_request_isset = YES;
  }
  return self;
}

- (void) encodeWithCoder: (NSCoder *) encoder
{
  if (__rawimage_isset)
  {
    [encoder encodeObject: __rawimage forKey: @"rawimage"];
  }
  if (__jobs_isset)
  {
    [encoder encodeObject: __jobs forKey: @"jobs"];
  }
  if (__time_sent_isset)
  {
    [encoder encodeInt32: __time_sent forKey: @"time_sent"];
  }
  if (__url_isset)
  {
    [encoder encodeObject: __url forKey: @"url"];
  }
  if (__format_isset)
  {
    [encoder encodeObject: __format forKey: @"format"];
  }
  if (__height_isset)
  {
    [encoder encodeInt32: __height forKey: @"height"];
  }
  if (__width_isset)
  {
    [encoder encodeInt32: __width forKey: @"width"];
  }
  if (__user_ID_isset)
  {
    [encoder encodeObject: __user_ID forKey: @"user_ID"];
  }
  if (__ext_isset)
  {
    [encoder encodeObject: __ext forKey: @"ext"];
  }
  if (__recognize_request_isset)
  {
    [encoder encodeObject: __recognize_request forKey: @"recognize_request"];
  }
}

- (void) dealloc
{
  [__rawimage release];
  [__jobs release];
  [__url release];
  [__format release];
  [__user_ID release];
  [__ext release];
  [__recognize_request release];
  [super dealloc];
}

- (NSString *) rawimage {
  return [[__rawimage retain] autorelease];
}

- (void) setRawimage: (NSString *) rawimage {
  [rawimage retain];
  [__rawimage release];
  __rawimage = rawimage;
  __rawimage_isset = YES;
}

- (BOOL) rawimageIsSet {
  return __rawimage_isset;
}

- (void) unsetRawimage {
  [__rawimage release];
  __rawimage = nil;
  __rawimage_isset = NO;
}

- (NSArray *) jobs {
  return [[__jobs retain] autorelease];
}

- (void) setJobs: (NSArray *) jobs {
  [jobs retain];
  [__jobs release];
  __jobs = jobs;
  __jobs_isset = YES;
}

- (BOOL) jobsIsSet {
  return __jobs_isset;
}

- (void) unsetJobs {
  [__jobs release];
  __jobs = nil;
  __jobs_isset = NO;
}

- (int32_t) time_sent {
  return __time_sent;
}

- (void) setTime_sent: (int32_t) time_sent {
  __time_sent = time_sent;
  __time_sent_isset = YES;
}

- (BOOL) time_sentIsSet {
  return __time_sent_isset;
}

- (void) unsetTime_sent {
  __time_sent_isset = NO;
}

- (NSString *) url {
  return [[__url retain] autorelease];
}

- (void) setUrl: (NSString *) url {
  [url retain];
  [__url release];
  __url = url;
  __url_isset = YES;
}

- (BOOL) urlIsSet {
  return __url_isset;
}

- (void) unsetUrl {
  [__url release];
  __url = nil;
  __url_isset = NO;
}

- (NSString *) format {
  return [[__format retain] autorelease];
}

- (void) setFormat: (NSString *) format {
  [format retain];
  [__format release];
  __format = format;
  __format_isset = YES;
}

- (BOOL) formatIsSet {
  return __format_isset;
}

- (void) unsetFormat {
  [__format release];
  __format = nil;
  __format_isset = NO;
}

- (int32_t) height {
  return __height;
}

- (void) setHeight: (int32_t) height {
  __height = height;
  __height_isset = YES;
}

- (BOOL) heightIsSet {
  return __height_isset;
}

- (void) unsetHeight {
  __height_isset = NO;
}

- (int32_t) width {
  return __width;
}

- (void) setWidth: (int32_t) width {
  __width = width;
  __width_isset = YES;
}

- (BOOL) widthIsSet {
  return __width_isset;
}

- (void) unsetWidth {
  __width_isset = NO;
}

- (NSString *) user_ID {
  return [[__user_ID retain] autorelease];
}

- (void) setUser_ID: (NSString *) user_ID {
  [user_ID retain];
  [__user_ID release];
  __user_ID = user_ID;
  __user_ID_isset = YES;
}

- (BOOL) user_IDIsSet {
  return __user_ID_isset;
}

- (void) unsetUser_ID {
  [__user_ID release];
  __user_ID = nil;
  __user_ID_isset = NO;
}

- (NSString *) ext {
  return [[__ext retain] autorelease];
}

- (void) setExt: (NSString *) ext {
  [ext retain];
  [__ext release];
  __ext = ext;
  __ext_isset = YES;
}

- (BOOL) extIsSet {
  return __ext_isset;
}

- (void) unsetExt {
  [__ext release];
  __ext = nil;
  __ext_isset = NO;
}

- (int32_t) rawimage_length {
    return __rawimage_length;
}

- (void) setRawimage_length:(int32_t)rawimage_length {
    __rawimage_length = rawimage_length;
    __rawimage_length_isset = YES;
}

- (BOOL) rawimage_lengthIsSet {
    return __rawimage_length_isset;
}

- (void) unsetRawimage_length {
    __rawimage_length_isset = NO;
}

- (char *) rawimage_utf8Bytes {
    return __rawimage_utf8Bytes;
}

- (void) setRawimage_utf8Bytes:(char *)rawimage_utf8Bytes {
    __rawimage_utf8Bytes = rawimage_utf8Bytes;
    __rawimage_utf8Bytes_isset = YES;
}

- (BOOL) rawimage_utf8BytesIsSet {
    return __rawimage_utf8Bytes_isset;
}

- (void) unsetRawimage_utf8Bytes {
    __rawimage_utf8Bytes_isset = NO;
}

- (FaceRecognizeRequest *) recognize_request {
  return [[__recognize_request retain] autorelease];
}

- (void) setRecognize_request: (FaceRecognizeRequest *) recognize_request {
  [recognize_request retain];
  [__recognize_request release];
  __recognize_request = recognize_request;
  __recognize_request_isset = YES;
}

- (BOOL) recognize_requestIsSet {
  return __recognize_request_isset;
}

- (void) unsetRecognize_request {
  [__recognize_request release];
  __recognize_request = nil;
  __recognize_request_isset = NO;
}

- (void) read: (id <TProtocol>) inProtocol
{
  NSString * fieldName;
  int fieldType;
  int fieldID;

  [inProtocol readStructBeginReturningName: NULL];
  while (true)
  {
    [inProtocol readFieldBeginReturningName: &fieldName type: &fieldType fieldID: &fieldID];
    if (fieldType == TType_STOP) { 
      break;
    }
    switch (fieldID)
    {
      case 1:
        if (fieldType == TType_STRING) {
          NSString * fieldValue = [inProtocol readString];
          [self setRawimage: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 2:
        if (fieldType == TType_LIST) {
          int _size5;
          [inProtocol readListBeginReturningElementType: NULL size: &_size5];
          NSMutableArray * fieldValue = [[NSMutableArray alloc] initWithCapacity: _size5];
          int _i6;
          for (_i6 = 0; _i6 < _size5; ++_i6)
          {
            NSString * _elem7 = [inProtocol readString];
            [fieldValue addObject: _elem7];
          }
          [inProtocol readListEnd];
          [self setJobs: fieldValue];
          [fieldValue release];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 3:
        if (fieldType == TType_I32) {
          int32_t fieldValue = [inProtocol readI32];
          [self setTime_sent: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 4:
        if (fieldType == TType_STRING) {
          NSString * fieldValue = [inProtocol readString];
          [self setUrl: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 5:
        if (fieldType == TType_STRING) {
          NSString * fieldValue = [inProtocol readString];
          [self setFormat: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 6:
        if (fieldType == TType_I32) {
          int32_t fieldValue = [inProtocol readI32];
          [self setHeight: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 7:
        if (fieldType == TType_I32) {
          int32_t fieldValue = [inProtocol readI32];
          [self setWidth: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 8:
        if (fieldType == TType_STRING) {
          NSString * fieldValue = [inProtocol readString];
          [self setUser_ID: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 9:
        if (fieldType == TType_STRING) {
          NSString * fieldValue = [inProtocol readString];
          [self setExt: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 10:
        if (fieldType == TType_STRUCT) {
          FaceRecognizeRequest *fieldValue = [[FaceRecognizeRequest alloc] init];
          [fieldValue read: inProtocol];
          [self setRecognize_request: fieldValue];
          [fieldValue release];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      default:
        [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        break;
    }
    [inProtocol readFieldEnd];
  }
  [inProtocol readStructEnd];
}

- (void) write: (id <TProtocol>) outProtocol {
  [outProtocol writeStructBeginWithName: @"VisualRequest"];    
  if (__rawimage_utf8Bytes_isset) {
    if (__rawimage_utf8Bytes != nil) {
        [outProtocol writeFieldBeginWithName: @"rawimage" type: TType_STRING fieldID: 1];
        @try {
            [outProtocol writeCString: __rawimage_utf8Bytes writeLength: __rawimage_length];
        }
        @catch (TTransportException *exception) {
            NSLog(@"TTransportException: Error writing to transport output stream.");
        }
        
        [outProtocol writeFieldEnd];
    }
  }
  if (__jobs_isset) {
    if (__jobs != nil) {
      [outProtocol writeFieldBeginWithName: @"jobs" type: TType_LIST fieldID: 2];
      {
        [outProtocol writeListBeginWithElementType: TType_STRING size: [__jobs count]];
        int i9;
        for (i9 = 0; i9 < [__jobs count]; i9++)
        {
          [outProtocol writeString: [__jobs objectAtIndex: i9]];
        }
        [outProtocol writeListEnd];
      }
      [outProtocol writeFieldEnd];
    }
  }
  if (__time_sent_isset) {
    [outProtocol writeFieldBeginWithName: @"time_sent" type: TType_I32 fieldID: 3];
    [outProtocol writeI32: __time_sent];
    [outProtocol writeFieldEnd];
  }
  if (__url_isset) {
    if (__url != nil) {
      [outProtocol writeFieldBeginWithName: @"url" type: TType_STRING fieldID: 4];
      [outProtocol writeString: __url];
      [outProtocol writeFieldEnd];
    }
  }
  if (__format_isset) {
    if (__format != nil) {
      [outProtocol writeFieldBeginWithName: @"format" type: TType_STRING fieldID: 5];
      [outProtocol writeString: __format];
      [outProtocol writeFieldEnd];
    }
  }
  if (__height_isset) {
    [outProtocol writeFieldBeginWithName: @"height" type: TType_I32 fieldID: 6];
    [outProtocol writeI32: __height];
    [outProtocol writeFieldEnd];
  }
  if (__width_isset) {
    [outProtocol writeFieldBeginWithName: @"width" type: TType_I32 fieldID: 7];
    [outProtocol writeI32: __width];
    [outProtocol writeFieldEnd];
  }
  if (__user_ID_isset) {
    if (__user_ID != nil) {
      [outProtocol writeFieldBeginWithName: @"user_ID" type: TType_STRING fieldID: 8];
      [outProtocol writeString: __user_ID];
      [outProtocol writeFieldEnd];
    }
  }
  if (__ext_isset) {
    if (__ext != nil) {
      [outProtocol writeFieldBeginWithName: @"ext" type: TType_STRING fieldID: 9];
      [outProtocol writeString: __ext];
      [outProtocol writeFieldEnd];
    }
  }
  if (__recognize_request_isset) {
    if (__recognize_request != nil) {
      [outProtocol writeFieldBeginWithName: @"recognize_request" type: TType_STRUCT fieldID: 10];
      [__recognize_request write: outProtocol];
      [outProtocol writeFieldEnd];
    }
  }
  [outProtocol writeFieldStop];
  [outProtocol writeStructEnd];
}

- (NSString *) description {
  NSMutableString * ms = [NSMutableString stringWithString: @"VisualRequest("];
  [ms appendString: @"rawimage:"];
  [ms appendFormat: @"\"%@\"", __rawimage];
  [ms appendString: @",jobs:"];
  [ms appendFormat: @"%@", __jobs];
  [ms appendString: @",time_sent:"];
  [ms appendFormat: @"%i", __time_sent];
  [ms appendString: @",url:"];
  [ms appendFormat: @"\"%@\"", __url];
  [ms appendString: @",format:"];
  [ms appendFormat: @"\"%@\"", __format];
  [ms appendString: @",height:"];
  [ms appendFormat: @"%i", __height];
  [ms appendString: @",width:"];
  [ms appendFormat: @"%i", __width];
  [ms appendString: @",user_ID:"];
  [ms appendFormat: @"\"%@\"", __user_ID];
  [ms appendString: @",ext:"];
  [ms appendFormat: @"\"%@\"", __ext];
  [ms appendString: @",recognize_request:"];
  [ms appendFormat: @"%@", __recognize_request];
  [ms appendString: @")"];
  return [NSString stringWithString: ms];
}

@end

@implementation VisualResponse

- (id) initWithJobs: (NSArray *) jobs analysis_result: (NSArray *) analysis_result rawimage: (NSString *) rawimage time_sent: (int32_t) time_sent time_spent_each_job: (NSArray *) time_spent_each_job url: (NSString *) url format: (NSString *) format height: (int32_t) height width: (int32_t) width ext: (NSString *) ext time_finished: (int32_t) time_finished cpu_load: (int32_t) cpu_load
{
  self = [super init];
  __jobs = [jobs retain];
  __jobs_isset = YES;
  __analysis_result = [analysis_result retain];
  __analysis_result_isset = YES;
  __rawimage = [rawimage retain];
  __rawimage_isset = YES;
  __time_sent = time_sent;
  __time_sent_isset = YES;
  __time_spent_each_job = [time_spent_each_job retain];
  __time_spent_each_job_isset = YES;
  __url = [url retain];
  __url_isset = YES;
  __format = [format retain];
  __format_isset = YES;
  __height = height;
  __height_isset = YES;
  __width = width;
  __width_isset = YES;
  __ext = [ext retain];
  __ext_isset = YES;
  __time_finished = time_finished;
  __time_finished_isset = YES;
  __cpu_load = cpu_load;
  __cpu_load_isset = YES;
  return self;
}

- (id) initWithCoder: (NSCoder *) decoder
{
  self = [super init];
  if ([decoder containsValueForKey: @"jobs"])
  {
    __jobs = [[decoder decodeObjectForKey: @"jobs"] retain];
    __jobs_isset = YES;
  }
  if ([decoder containsValueForKey: @"analysis_result"])
  {
    __analysis_result = [[decoder decodeObjectForKey: @"analysis_result"] retain];
    __analysis_result_isset = YES;
  }
  if ([decoder containsValueForKey: @"rawimage"])
  {
    __rawimage = [[decoder decodeObjectForKey: @"rawimage"] retain];
    __rawimage_isset = YES;
  }
  if ([decoder containsValueForKey: @"time_sent"])
  {
    __time_sent = [decoder decodeInt32ForKey: @"time_sent"];
    __time_sent_isset = YES;
  }
  if ([decoder containsValueForKey: @"time_spent_each_job"])
  {
    __time_spent_each_job = [[decoder decodeObjectForKey: @"time_spent_each_job"] retain];
    __time_spent_each_job_isset = YES;
  }
  if ([decoder containsValueForKey: @"url"])
  {
    __url = [[decoder decodeObjectForKey: @"url"] retain];
    __url_isset = YES;
  }
  if ([decoder containsValueForKey: @"format"])
  {
    __format = [[decoder decodeObjectForKey: @"format"] retain];
    __format_isset = YES;
  }
  if ([decoder containsValueForKey: @"height"])
  {
    __height = [decoder decodeInt32ForKey: @"height"];
    __height_isset = YES;
  }
  if ([decoder containsValueForKey: @"width"])
  {
    __width = [decoder decodeInt32ForKey: @"width"];
    __width_isset = YES;
  }
  if ([decoder containsValueForKey: @"ext"])
  {
    __ext = [[decoder decodeObjectForKey: @"ext"] retain];
    __ext_isset = YES;
  }
  if ([decoder containsValueForKey: @"time_finished"])
  {
    __time_finished = [decoder decodeInt32ForKey: @"time_finished"];
    __time_finished_isset = YES;
  }
  if ([decoder containsValueForKey: @"cpu_load"])
  {
    __cpu_load = [decoder decodeInt32ForKey: @"cpu_load"];
    __cpu_load_isset = YES;
  }
  return self;
}

- (void) encodeWithCoder: (NSCoder *) encoder
{
  if (__jobs_isset)
  {
    [encoder encodeObject: __jobs forKey: @"jobs"];
  }
  if (__analysis_result_isset)
  {
    [encoder encodeObject: __analysis_result forKey: @"analysis_result"];
  }
  if (__rawimage_isset)
  {
    [encoder encodeObject: __rawimage forKey: @"rawimage"];
  }
  if (__time_sent_isset)
  {
    [encoder encodeInt32: __time_sent forKey: @"time_sent"];
  }
  if (__time_spent_each_job_isset)
  {
    [encoder encodeObject: __time_spent_each_job forKey: @"time_spent_each_job"];
  }
  if (__url_isset)
  {
    [encoder encodeObject: __url forKey: @"url"];
  }
  if (__format_isset)
  {
    [encoder encodeObject: __format forKey: @"format"];
  }
  if (__height_isset)
  {
    [encoder encodeInt32: __height forKey: @"height"];
  }
  if (__width_isset)
  {
    [encoder encodeInt32: __width forKey: @"width"];
  }
  if (__ext_isset)
  {
    [encoder encodeObject: __ext forKey: @"ext"];
  }
  if (__time_finished_isset)
  {
    [encoder encodeInt32: __time_finished forKey: @"time_finished"];
  }
  if (__cpu_load_isset)
  {
    [encoder encodeInt32: __cpu_load forKey: @"cpu_load"];
  }
}

- (void) dealloc
{
  [__jobs release];
  [__analysis_result release];
  [__rawimage release];
  [__time_spent_each_job release];
  [__url release];
  [__format release];
  [__ext release];
  [super dealloc];
}

- (NSArray *) jobs {
  return [[__jobs retain] autorelease];
}

- (void) setJobs: (NSArray *) jobs {
  [jobs retain];
  [__jobs release];
  __jobs = jobs;
  __jobs_isset = YES;
}

- (BOOL) jobsIsSet {
  return __jobs_isset;
}

- (void) unsetJobs {
  [__jobs release];
  __jobs = nil;
  __jobs_isset = NO;
}

- (NSArray *) analysis_result {
  return [[__analysis_result retain] autorelease];
}

- (void) setAnalysis_result: (NSArray *) analysis_result {
  [analysis_result retain];
  [__analysis_result release];
  __analysis_result = analysis_result;
  __analysis_result_isset = YES;
}

- (BOOL) analysis_resultIsSet {
  return __analysis_result_isset;
}

- (void) unsetAnalysis_result {
  [__analysis_result release];
  __analysis_result = nil;
  __analysis_result_isset = NO;
}

- (NSString *) rawimage {
  return [[__rawimage retain] autorelease];
}

- (void) setRawimage: (NSString *) rawimage {
  [rawimage retain];
  [__rawimage release];
  __rawimage = rawimage;
  __rawimage_isset = YES;
}

- (BOOL) rawimageIsSet {
  return __rawimage_isset;
}

- (void) unsetRawimage {
  [__rawimage release];
  __rawimage = nil;
  __rawimage_isset = NO;
}

- (int32_t) time_sent {
  return __time_sent;
}

- (void) setTime_sent: (int32_t) time_sent {
  __time_sent = time_sent;
  __time_sent_isset = YES;
}

- (BOOL) time_sentIsSet {
  return __time_sent_isset;
}

- (void) unsetTime_sent {
  __time_sent_isset = NO;
}

- (NSArray *) time_spent_each_job {
  return [[__time_spent_each_job retain] autorelease];
}

- (void) setTime_spent_each_job: (NSArray *) time_spent_each_job {
  [time_spent_each_job retain];
  [__time_spent_each_job release];
  __time_spent_each_job = time_spent_each_job;
  __time_spent_each_job_isset = YES;
}

- (BOOL) time_spent_each_jobIsSet {
  return __time_spent_each_job_isset;
}

- (void) unsetTime_spent_each_job {
  [__time_spent_each_job release];
  __time_spent_each_job = nil;
  __time_spent_each_job_isset = NO;
}

- (NSString *) url {
  return [[__url retain] autorelease];
}

- (void) setUrl: (NSString *) url {
  [url retain];
  [__url release];
  __url = url;
  __url_isset = YES;
}

- (BOOL) urlIsSet {
  return __url_isset;
}

- (void) unsetUrl {
  [__url release];
  __url = nil;
  __url_isset = NO;
}

- (NSString *) format {
  return [[__format retain] autorelease];
}

- (void) setFormat: (NSString *) format {
  [format retain];
  [__format release];
  __format = format;
  __format_isset = YES;
}

- (BOOL) formatIsSet {
  return __format_isset;
}

- (void) unsetFormat {
  [__format release];
  __format = nil;
  __format_isset = NO;
}

- (int32_t) height {
  return __height;
}

- (void) setHeight: (int32_t) height {
  __height = height;
  __height_isset = YES;
}

- (BOOL) heightIsSet {
  return __height_isset;
}

- (void) unsetHeight {
  __height_isset = NO;
}

- (int32_t) width {
  return __width;
}

- (void) setWidth: (int32_t) width {
  __width = width;
  __width_isset = YES;
}

- (BOOL) widthIsSet {
  return __width_isset;
}

- (void) unsetWidth {
  __width_isset = NO;
}

- (NSString *) ext {
  return [[__ext retain] autorelease];
}

- (void) setExt: (NSString *) ext {
  [ext retain];
  [__ext release];
  __ext = ext;
  __ext_isset = YES;
}

- (BOOL) extIsSet {
  return __ext_isset;
}

- (void) unsetExt {
  [__ext release];
  __ext = nil;
  __ext_isset = NO;
}

- (int32_t) time_finished {
  return __time_finished;
}

- (void) setTime_finished: (int32_t) time_finished {
  __time_finished = time_finished;
  __time_finished_isset = YES;
}

- (BOOL) time_finishedIsSet {
  return __time_finished_isset;
}

- (void) unsetTime_finished {
  __time_finished_isset = NO;
}

- (int32_t) cpu_load {
  return __cpu_load;
}

- (void) setCpu_load: (int32_t) cpu_load {
  __cpu_load = cpu_load;
  __cpu_load_isset = YES;
}

- (BOOL) cpu_loadIsSet {
  return __cpu_load_isset;
}

- (void) unsetCpu_load {
  __cpu_load_isset = NO;
}

- (void) read: (id <TProtocol>) inProtocol
{
  NSString * fieldName;
  int fieldType;
  int fieldID;

  [inProtocol readStructBeginReturningName: NULL];
  while (true)
  {
    [inProtocol readFieldBeginReturningName: &fieldName type: &fieldType fieldID: &fieldID];
    if (fieldType == TType_STOP) { 
      break;
    }
    switch (fieldID)
    {
      case 1:
        if (fieldType == TType_LIST) {
          int _size10;
          [inProtocol readListBeginReturningElementType: NULL size: &_size10];
          NSMutableArray * fieldValue = [[NSMutableArray alloc] initWithCapacity: _size10];
          int _i11;
          for (_i11 = 0; _i11 < _size10; ++_i11)
          {
            NSString * _elem12 = [inProtocol readString];
            [fieldValue addObject: _elem12];
          }
          [inProtocol readListEnd];
          [self setJobs: fieldValue];
          [fieldValue release];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 2:
        if (fieldType == TType_LIST) {
          int _size13;
          [inProtocol readListBeginReturningElementType: NULL size: &_size13];
          NSMutableArray * fieldValue = [[NSMutableArray alloc] initWithCapacity: _size13];
          int _i14;
          for (_i14 = 0; _i14 < _size13; ++_i14)
          {
            NSString * _elem15 = [inProtocol readString];
            [fieldValue addObject: _elem15];
          }
          [inProtocol readListEnd];
          [self setAnalysis_result: fieldValue];
          [fieldValue release];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 3:
        if (fieldType == TType_STRING) {
          NSString * fieldValue = [inProtocol readString];
          [self setRawimage: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 4:
        if (fieldType == TType_I32) {
          int32_t fieldValue = [inProtocol readI32];
          [self setTime_sent: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 5:
        if (fieldType == TType_LIST) {
          int _size16;
          [inProtocol readListBeginReturningElementType: NULL size: &_size16];
          NSMutableArray * fieldValue = [[NSMutableArray alloc] initWithCapacity: _size16];
          int _i17;
          for (_i17 = 0; _i17 < _size16; ++_i17)
          {
            int32_t _elem18 = [inProtocol readI32];
            [fieldValue addObject: [NSNumber numberWithLong: _elem18]];
          }
          [inProtocol readListEnd];
          [self setTime_spent_each_job: fieldValue];
          [fieldValue release];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 6:
        if (fieldType == TType_STRING) {
          NSString * fieldValue = [inProtocol readString];
          [self setUrl: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 7:
        if (fieldType == TType_STRING) {
          NSString * fieldValue = [inProtocol readString];
          [self setFormat: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 8:
        if (fieldType == TType_I32) {
          int32_t fieldValue = [inProtocol readI32];
          [self setHeight: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 9:
        if (fieldType == TType_I32) {
          int32_t fieldValue = [inProtocol readI32];
          [self setWidth: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 10:
        if (fieldType == TType_STRING) {
          NSString * fieldValue = [inProtocol readString];
          [self setExt: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 11:
        if (fieldType == TType_I32) {
          int32_t fieldValue = [inProtocol readI32];
          [self setTime_finished: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 12:
        if (fieldType == TType_I32) {
          int32_t fieldValue = [inProtocol readI32];
          [self setCpu_load: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      default:
        [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        break;
    }
    [inProtocol readFieldEnd];
  }
  [inProtocol readStructEnd];
}

- (void) write: (id <TProtocol>) outProtocol {
  [outProtocol writeStructBeginWithName: @"VisualResponse"];
  if (__jobs_isset) {
    if (__jobs != nil) {
      [outProtocol writeFieldBeginWithName: @"jobs" type: TType_LIST fieldID: 1];
      {
        [outProtocol writeListBeginWithElementType: TType_STRING size: [__jobs count]];
        int i20;
        for (i20 = 0; i20 < [__jobs count]; i20++)
        {
          [outProtocol writeString: [__jobs objectAtIndex: i20]];
        }
        [outProtocol writeListEnd];
      }
      [outProtocol writeFieldEnd];
    }
  }
  if (__analysis_result_isset) {
    if (__analysis_result != nil) {
      [outProtocol writeFieldBeginWithName: @"analysis_result" type: TType_LIST fieldID: 2];
      {
        [outProtocol writeListBeginWithElementType: TType_STRING size: [__analysis_result count]];
        int i22;
        for (i22 = 0; i22 < [__analysis_result count]; i22++)
        {
          [outProtocol writeString: [__analysis_result objectAtIndex: i22]];
        }
        [outProtocol writeListEnd];
      }
      [outProtocol writeFieldEnd];
    }
  }
  if (__rawimage_isset) {
    if (__rawimage != nil) {
      [outProtocol writeFieldBeginWithName: @"rawimage" type: TType_STRING fieldID: 3];
      [outProtocol writeString: __rawimage];
      [outProtocol writeFieldEnd];
    }
  }
  if (__time_sent_isset) {
    [outProtocol writeFieldBeginWithName: @"time_sent" type: TType_I32 fieldID: 4];
    [outProtocol writeI32: __time_sent];
    [outProtocol writeFieldEnd];
  }
  if (__time_spent_each_job_isset) {
    if (__time_spent_each_job != nil) {
      [outProtocol writeFieldBeginWithName: @"time_spent_each_job" type: TType_LIST fieldID: 5];
      {
        [outProtocol writeListBeginWithElementType: TType_I32 size: [__time_spent_each_job count]];
        int i24;
        for (i24 = 0; i24 < [__time_spent_each_job count]; i24++)
        {
          [outProtocol writeI32: [[__time_spent_each_job objectAtIndex: i24] longValue]];
        }
        [outProtocol writeListEnd];
      }
      [outProtocol writeFieldEnd];
    }
  }
  if (__url_isset) {
    if (__url != nil) {
      [outProtocol writeFieldBeginWithName: @"url" type: TType_STRING fieldID: 6];
      [outProtocol writeString: __url];
      [outProtocol writeFieldEnd];
    }
  }
  if (__format_isset) {
    if (__format != nil) {
      [outProtocol writeFieldBeginWithName: @"format" type: TType_STRING fieldID: 7];
      [outProtocol writeString: __format];
      [outProtocol writeFieldEnd];
    }
  }
  if (__height_isset) {
    [outProtocol writeFieldBeginWithName: @"height" type: TType_I32 fieldID: 8];
    [outProtocol writeI32: __height];
    [outProtocol writeFieldEnd];
  }
  if (__width_isset) {
    [outProtocol writeFieldBeginWithName: @"width" type: TType_I32 fieldID: 9];
    [outProtocol writeI32: __width];
    [outProtocol writeFieldEnd];
  }
  if (__ext_isset) {
    if (__ext != nil) {
      [outProtocol writeFieldBeginWithName: @"ext" type: TType_STRING fieldID: 10];
      [outProtocol writeString: __ext];
      [outProtocol writeFieldEnd];
    }
  }
  if (__time_finished_isset) {
    [outProtocol writeFieldBeginWithName: @"time_finished" type: TType_I32 fieldID: 11];
    [outProtocol writeI32: __time_finished];
    [outProtocol writeFieldEnd];
  }
  if (__cpu_load_isset) {
    [outProtocol writeFieldBeginWithName: @"cpu_load" type: TType_I32 fieldID: 12];
    [outProtocol writeI32: __cpu_load];
    [outProtocol writeFieldEnd];
  }
  [outProtocol writeFieldStop];
  [outProtocol writeStructEnd];
}

- (NSString *) description {
  NSMutableString * ms = [NSMutableString stringWithString: @"VisualResponse("];
  [ms appendString: @"jobs:"];
  [ms appendFormat: @"%@", __jobs];
  [ms appendString: @",analysis_result:"];
  [ms appendFormat: @"%@", __analysis_result];
  [ms appendString: @",rawimage:"];
  [ms appendFormat: @"\"%@\"", __rawimage];
  [ms appendString: @",time_sent:"];
  [ms appendFormat: @"%i", __time_sent];
  [ms appendString: @",time_spent_each_job:"];
  [ms appendFormat: @"%@", __time_spent_each_job];
  [ms appendString: @",url:"];
  [ms appendFormat: @"\"%@\"", __url];
  [ms appendString: @",format:"];
  [ms appendFormat: @"\"%@\"", __format];
  [ms appendString: @",height:"];
  [ms appendFormat: @"%i", __height];
  [ms appendString: @",width:"];
  [ms appendFormat: @"%i", __width];
  [ms appendString: @",ext:"];
  [ms appendFormat: @"\"%@\"", __ext];
  [ms appendString: @",time_finished:"];
  [ms appendFormat: @"%i", __time_finished];
  [ms appendString: @",cpu_load:"];
  [ms appendFormat: @"%i", __cpu_load];
  [ms appendString: @")"];
  return [NSString stringWithString: ms];
}

@end


@implementation PeterRequestConstants
+ (void) initialize {
}
@end

@interface Analyse_args : NSObject <NSCoding> {
  VisualRequest * __req;

  BOOL __req_isset;
}

#if TARGET_OS_IPHONE || (MAC_OS_X_VERSION_MAX_ALLOWED >= MAC_OS_X_VERSION_10_5)
@property (nonatomic, retain, getter=req, setter=setReq:) VisualRequest * req;
#endif

- (id) initWithReq: (VisualRequest *) req;

- (void) read: (id <TProtocol>) inProtocol;
- (void) write: (id <TProtocol>) outProtocol;

- (VisualRequest *) req;
- (void) setReq: (VisualRequest *) req;
- (BOOL) reqIsSet;

@end

@implementation Analyse_args

- (id) initWithReq: (VisualRequest *) req
{
  self = [super init];
  __req = [req retain];
  __req_isset = YES;
  return self;
}

- (id) initWithCoder: (NSCoder *) decoder
{
  self = [super init];
  if ([decoder containsValueForKey: @"req"])
  {
    __req = [[decoder decodeObjectForKey: @"req"] retain];
    __req_isset = YES;
  }
  return self;
}

- (void) encodeWithCoder: (NSCoder *) encoder
{
  if (__req_isset)
  {
    [encoder encodeObject: __req forKey: @"req"];
  }
}

- (void) dealloc
{
  [__req release];
  [super dealloc];
}

- (VisualRequest *) req {
  return [[__req retain] autorelease];
}

- (void) setReq: (VisualRequest *) req {
  [req retain];
  [__req release];
  __req = req;
  __req_isset = YES;
}

- (BOOL) reqIsSet {
  return __req_isset;
}

- (void) unsetReq {
  [__req release];
  __req = nil;
  __req_isset = NO;
}

- (void) read: (id <TProtocol>) inProtocol
{
  NSString * fieldName;
  int fieldType;
  int fieldID;

  [inProtocol readStructBeginReturningName: NULL];
  while (true)
  {
    [inProtocol readFieldBeginReturningName: &fieldName type: &fieldType fieldID: &fieldID];
    if (fieldType == TType_STOP) { 
      break;
    }
    switch (fieldID)
    {
      case 1:
        if (fieldType == TType_STRUCT) {
          VisualRequest *fieldValue = [[VisualRequest alloc] init];
          [fieldValue read: inProtocol];
          [self setReq: fieldValue];
          [fieldValue release];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      default:
        [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        break;
    }
    [inProtocol readFieldEnd];
  }
  [inProtocol readStructEnd];
}

- (void) write: (id <TProtocol>) outProtocol {
  [outProtocol writeStructBeginWithName: @"Analyse_args"];
  if (__req_isset) {
    if (__req != nil) {
      [outProtocol writeFieldBeginWithName: @"req" type: TType_STRUCT fieldID: 1];
      [__req write: outProtocol];
      [outProtocol writeFieldEnd];
    }
  }
  [outProtocol writeFieldStop];
  [outProtocol writeStructEnd];
}

- (NSString *) description {
  NSMutableString * ms = [NSMutableString stringWithString: @"Analyse_args("];
  [ms appendString: @"req:"];
  [ms appendFormat: @"%@", __req];
  [ms appendString: @")"];
  return [NSString stringWithString: ms];
}

@end

@interface Analyse_result : NSObject <NSCoding> {
  VisualResponse * __success;

  BOOL __success_isset;
}

#if TARGET_OS_IPHONE || (MAC_OS_X_VERSION_MAX_ALLOWED >= MAC_OS_X_VERSION_10_5)
@property (nonatomic, retain, getter=success, setter=setSuccess:) VisualResponse * success;
#endif

- (id) initWithSuccess: (VisualResponse *) success;

- (void) read: (id <TProtocol>) inProtocol;
- (void) write: (id <TProtocol>) outProtocol;

- (VisualResponse *) success;
- (void) setSuccess: (VisualResponse *) success;
- (BOOL) successIsSet;

@end

@implementation Analyse_result

- (id) initWithSuccess: (VisualResponse *) success
{
  self = [super init];
  __success = [success retain];
  __success_isset = YES;
  return self;
}

- (id) initWithCoder: (NSCoder *) decoder
{
  self = [super init];
  if ([decoder containsValueForKey: @"success"])
  {
    __success = [[decoder decodeObjectForKey: @"success"] retain];
    __success_isset = YES;
  }
  return self;
}

- (void) encodeWithCoder: (NSCoder *) encoder
{
  if (__success_isset)
  {
    [encoder encodeObject: __success forKey: @"success"];
  }
}

- (void) dealloc
{
  [__success release];
  [super dealloc];
}

- (VisualResponse *) success {
  return [[__success retain] autorelease];
}

- (void) setSuccess: (VisualResponse *) success {
  [success retain];
  [__success release];
  __success = success;
  __success_isset = YES;
}

- (BOOL) successIsSet {
  return __success_isset;
}

- (void) unsetSuccess {
  [__success release];
  __success = nil;
  __success_isset = NO;
}

- (void) read: (id <TProtocol>) inProtocol
{
  NSString * fieldName;
  int fieldType;
  int fieldID;

  [inProtocol readStructBeginReturningName: NULL];
  while (true)
  {
    [inProtocol readFieldBeginReturningName: &fieldName type: &fieldType fieldID: &fieldID];
    if (fieldType == TType_STOP) { 
      break;
    }
    switch (fieldID)
    {
      case 0:
        if (fieldType == TType_STRUCT) {
          VisualResponse *fieldValue = [[VisualResponse alloc] init];
          [fieldValue read: inProtocol];
          [self setSuccess: fieldValue];
          [fieldValue release];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      default:
        [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        break;
    }
    [inProtocol readFieldEnd];
  }
  [inProtocol readStructEnd];
}

- (void) write: (id <TProtocol>) outProtocol {
  [outProtocol writeStructBeginWithName: @"Analyse_result"];

  if (__success_isset) {
    if (__success != nil) {
      [outProtocol writeFieldBeginWithName: @"success" type: TType_STRUCT fieldID: 0];
      [__success write: outProtocol];
      [outProtocol writeFieldEnd];
    }
  }
  [outProtocol writeFieldStop];
  [outProtocol writeStructEnd];
}

- (NSString *) description {
  NSMutableString * ms = [NSMutableString stringWithString: @"Analyse_result("];
  [ms appendString: @"success:"];
  [ms appendFormat: @"%@", __success];
  [ms appendString: @")"];
  return [NSString stringWithString: ms];
}

@end

@implementation LBDispatcherClient
- (id) initWithProtocol: (id <TProtocol>) protocol
{
  return [self initWithInProtocol: protocol outProtocol: protocol];
}

- (id) initWithInProtocol: (id <TProtocol>) anInProtocol outProtocol: (id <TProtocol>) anOutProtocol
{
  [super init];
  inProtocol = [anInProtocol retain];
  outProtocol = [anOutProtocol retain];
  return self;
}

- (void) expdDealloc
{
    [self dealloc];
}

- (void) dealloc
{
  [inProtocol release];
  [outProtocol release];
  [super dealloc];
}

- (void) send_Analyse: (VisualRequest *) req
{
  [outProtocol writeMessageBeginWithName: @"Analyse" type: TMessageType_CALL sequenceID: 0];
  [outProtocol writeStructBeginWithName: @"Analyse_args"];
  if (req != nil)  {
    [outProtocol writeFieldBeginWithName: @"req" type: TType_STRUCT fieldID: 1];
    [req write: outProtocol];
    [outProtocol writeFieldEnd];
  }
  [outProtocol writeFieldStop];
  [outProtocol writeStructEnd];
  [outProtocol writeMessageEnd];
  [[outProtocol transport] flush];
}

- (VisualResponse *) recv_Analyse
{
  int msgType = 0;
  [inProtocol readMessageBeginReturningName: nil type: &msgType sequenceID: NULL];
  if (msgType == TMessageType_EXCEPTION) {
    TApplicationException * x = [TApplicationException read: inProtocol];
    [inProtocol readMessageEnd];
    @throw x;
  }
  Analyse_result * result = [[[Analyse_result alloc] init] autorelease];
  [result read: inProtocol];
  [inProtocol readMessageEnd];
  if ([result successIsSet]) {
    return [result success];
  }
  @throw [TApplicationException exceptionWithType: TApplicationException_MISSING_RESULT
                                           reason: @"Analyse failed: unknown result"];
}

- (VisualResponse *) Analyse: (VisualRequest *) req
{
  [self send_Analyse: req];
  return [self recv_Analyse];
}

@end

@implementation LBDispatcherProcessor

- (id) initWithLBDispatcher: (id <LBDispatcher>) service
{
  self = [super init];
  if (!self) {
    return nil;
  }
  mService = [service retain];
  mMethodMap = [[NSMutableDictionary dictionary] retain];
  {
    SEL s = @selector(process_Analyse_withSequenceID:inProtocol:outProtocol:);
    NSMethodSignature * sig = [self methodSignatureForSelector: s];
    NSInvocation * invocation = [NSInvocation invocationWithMethodSignature: sig];
    [invocation setSelector: s];
    [invocation retainArguments];
    [mMethodMap setValue: invocation forKey: @"Analyse"];
  }
  return self;
}

- (id<LBDispatcher>) service
{
  return [[mService retain] autorelease];
}

- (BOOL) processOnInputProtocol: (id <TProtocol>) inProtocol
                 outputProtocol: (id <TProtocol>) outProtocol
{
  NSString * messageName;
  int messageType;
  int seqID;
  [inProtocol readMessageBeginReturningName: &messageName
                                       type: &messageType
                                 sequenceID: &seqID];
  NSInvocation * invocation = [mMethodMap valueForKey: messageName];
  if (invocation == nil) {
    [TProtocolUtil skipType: TType_STRUCT onProtocol: inProtocol];
    [inProtocol readMessageEnd];
    TApplicationException * x = [TApplicationException exceptionWithType: TApplicationException_UNKNOWN_METHOD reason: [NSString stringWithFormat: @"Invalid method name: '%@'", messageName]];
    [outProtocol writeMessageBeginWithName: messageName
                                      type: TMessageType_EXCEPTION
                                sequenceID: seqID];
    [x write: outProtocol];
    [outProtocol writeMessageEnd];
    [[outProtocol transport] flush];
    return YES;
  }
  // NSInvocation does not conform to NSCopying protocol
  NSInvocation * i = [NSInvocation invocationWithMethodSignature: [invocation methodSignature]];
  [i setSelector: [invocation selector]];
  [i setArgument: &seqID atIndex: 2];
  [i setArgument: &inProtocol atIndex: 3];
  [i setArgument: &outProtocol atIndex: 4];
  [i setTarget: self];
  [i invoke];
  return YES;
}

- (void) process_Analyse_withSequenceID: (int32_t) seqID inProtocol: (id<TProtocol>) inProtocol outProtocol: (id<TProtocol>) outProtocol
{
  Analyse_args * args = [[Analyse_args alloc] init];
  [args read: inProtocol];
  [inProtocol readMessageEnd];
  Analyse_result * result = [[Analyse_result alloc] init];
  [result setSuccess: [mService Analyse: [args req]]];
  [outProtocol writeMessageBeginWithName: @"Analyse"
                                    type: TMessageType_REPLY
                              sequenceID: seqID];
  [result write: outProtocol];
  [outProtocol writeMessageEnd];
  [[outProtocol transport] flush];
  [result release];
  [args release];
}

- (void) dealloc
{
  [mService release];
  [mMethodMap release];
  [super dealloc];
}
@end

@implementation VisualAnalsisServiceClient
- (id) initWithProtocol: (id <TProtocol>) protocol
{
return [self initWithInProtocol: protocol outProtocol: protocol];
}

- (id) initWithInProtocol: (id <TProtocol>) anInProtocol outProtocol: (id <TProtocol>) anOutProtocol
{
[super init];
inProtocol = [anInProtocol retain];
outProtocol = [anOutProtocol retain];
return self;
}

- (void) dealloc
{
[inProtocol release];
[outProtocol release];
[super dealloc];
}

- (void) send_Analyse: (VisualRequest *) req
{
[outProtocol writeMessageBeginWithName: @"Analyse" type: TMessageType_CALL sequenceID: 0];
[outProtocol writeStructBeginWithName: @"Analyse_args"];
if (req != nil){
  [outProtocol writeFieldBeginWithName: @"req" type: TType_STRUCT fieldID: 1];
  [req write: outProtocol];
  [outProtocol writeFieldEnd];
}
[outProtocol writeFieldStop];
[outProtocol writeStructEnd];
[outProtocol writeMessageEnd];
[[outProtocol transport] flush];
}

- (VisualResponse *) recv_Analyse
{
int msgType = 0;
[inProtocol readMessageBeginReturningName: nil type: &msgType sequenceID: NULL];
if (msgType == TMessageType_EXCEPTION) {
  TApplicationException * x = [TApplicationException read: inProtocol];
  [inProtocol readMessageEnd];
  @throw x;
}
Analyse_result * result = [[[Analyse_result alloc] init] autorelease];
[result read: inProtocol];
[inProtocol readMessageEnd];
if ([result successIsSet]) {
  return [result success];
}
@throw [TApplicationException exceptionWithType: TApplicationException_MISSING_RESULT
                                         reason: @"Analyse failed: unknown result"];
}

- (VisualResponse *) Analyse: (VisualRequest *) req
{
[self send_Analyse: req];
return [self recv_Analyse];
}

@end

@implementation VisualAnalsisServiceProcessor

- (id) initWithVisualAnalsisService: (id <VisualAnalsisService>) service
{
self = [super init];
if (!self) {
  return nil;
}
mService = [service retain];
mMethodMap = [[NSMutableDictionary dictionary] retain];
{
  SEL s = @selector(process_Analyse_withSequenceID:inProtocol:outProtocol:);
  NSMethodSignature * sig = [self methodSignatureForSelector: s];
  NSInvocation * invocation = [NSInvocation invocationWithMethodSignature: sig];
  [invocation setSelector: s];
  [invocation retainArguments];
  [mMethodMap setValue: invocation forKey: @"Analyse"];
}
return self;
}

- (id<VisualAnalsisService>) service
{
  return [[mService retain] autorelease];
}

- (BOOL) processOnInputProtocol: (id <TProtocol>) inProtocol
                 outputProtocol: (id <TProtocol>) outProtocol
{
  NSString * messageName;
  int messageType;
  int seqID;
  [inProtocol readMessageBeginReturningName: &messageName
                                       type: &messageType
                                 sequenceID: &seqID];
  NSInvocation * invocation = [mMethodMap valueForKey: messageName];
  if (invocation == nil) {
    [TProtocolUtil skipType: TType_STRUCT onProtocol: inProtocol];
    [inProtocol readMessageEnd];
    TApplicationException * x = [TApplicationException exceptionWithType: TApplicationException_UNKNOWN_METHOD reason: [NSString stringWithFormat: @"Invalid method name: '%@'", messageName]];
    [outProtocol writeMessageBeginWithName: messageName
                                      type: TMessageType_EXCEPTION
                                sequenceID: seqID];
    [x write: outProtocol];
    [outProtocol writeMessageEnd];
    [[outProtocol transport] flush];
    return YES;
  }
  // NSInvocation does not conform to NSCopying protocol
  NSInvocation * i = [NSInvocation invocationWithMethodSignature: [invocation methodSignature]];
  [i setSelector: [invocation selector]];
  [i setArgument: &seqID atIndex: 2];
  [i setArgument: &inProtocol atIndex: 3];
  [i setArgument: &outProtocol atIndex: 4];
  [i setTarget: self];
  [i invoke];
  return YES;
}

- (void) process_Analyse_withSequenceID: (int32_t) seqID inProtocol: (id<TProtocol>) inProtocol outProtocol: (id<TProtocol>) outProtocol
{
Analyse_args * args = [[Analyse_args alloc] init];
[args read: inProtocol];
[inProtocol readMessageEnd];
Analyse_result * result = [[Analyse_result alloc] init];
[result setSuccess: [mService Analyse: [args req]]];
[outProtocol writeMessageBeginWithName: @"Analyse"
                                  type: TMessageType_REPLY
                            sequenceID: seqID];
[result write: outProtocol];
[outProtocol writeMessageEnd];
[[outProtocol transport] flush];
[result release];
[args release];
}

- (void) dealloc
{
[mService release];
[mMethodMap release];
[super dealloc];
}

@end

